/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TransactionGetFastRecord.proto */

#ifndef PROTOBUF_C_TransactionGetFastRecord_2eproto__INCLUDED
#define PROTOBUF_C_TransactionGetFastRecord_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "TransactionRecord.pb-c.h"
#include "BasicTypes.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"

typedef struct Proto__TransactionGetFastRecordQuery Proto__TransactionGetFastRecordQuery;
typedef struct Proto__TransactionGetFastRecordResponse Proto__TransactionGetFastRecordResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Get the tx record of a transaction, given its transaction ID. Once a transaction reaches consensus, then information about whether it succeeded or failed will be available until the end of the receipt period.  Before and after the receipt period, and for a transaction that was never submitted, the receipt is unknown.  This query is free (the payment field is left empty). 
 */
struct  Proto__TransactionGetFastRecordQuery
{
  ProtobufCMessage base;
  /*
   * Standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
   */
  Proto__QueryHeader *header;
  /*
   * The ID of the transaction for which the record is requested.
   */
  Proto__TransactionID *transactionid;
};
#define PROTO__TRANSACTION_GET_FAST_RECORD_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__transaction_get_fast_record_query__descriptor) \
    , NULL, NULL }


/*
 * Response when the client sends the node TransactionGetFastRecordQuery. If it created a new entity (account, file, or smart contract instance) then one of the three ID fields will be filled in with the ID of the new entity. Sometimes a single transaction will create more than one new entity, such as when a new contract instance is created, and this also creates the new account that it owned by that instance. 
 */
struct  Proto__TransactionGetFastRecordResponse
{
  ProtobufCMessage base;
  /*
   *Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
   */
  Proto__ResponseHeader *header;
  /*
   * The requested transaction records
   */
  Proto__TransactionRecord *transactionrecord;
};
#define PROTO__TRANSACTION_GET_FAST_RECORD_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__transaction_get_fast_record_response__descriptor) \
    , NULL, NULL }


/* Proto__TransactionGetFastRecordQuery methods */
void   proto__transaction_get_fast_record_query__init
                     (Proto__TransactionGetFastRecordQuery         *message);
size_t proto__transaction_get_fast_record_query__get_packed_size
                     (const Proto__TransactionGetFastRecordQuery   *message);
size_t proto__transaction_get_fast_record_query__pack
                     (const Proto__TransactionGetFastRecordQuery   *message,
                      uint8_t             *out);
size_t proto__transaction_get_fast_record_query__pack_to_buffer
                     (const Proto__TransactionGetFastRecordQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__TransactionGetFastRecordQuery *
       proto__transaction_get_fast_record_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__transaction_get_fast_record_query__free_unpacked
                     (Proto__TransactionGetFastRecordQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__TransactionGetFastRecordResponse methods */
void   proto__transaction_get_fast_record_response__init
                     (Proto__TransactionGetFastRecordResponse         *message);
size_t proto__transaction_get_fast_record_response__get_packed_size
                     (const Proto__TransactionGetFastRecordResponse   *message);
size_t proto__transaction_get_fast_record_response__pack
                     (const Proto__TransactionGetFastRecordResponse   *message,
                      uint8_t             *out);
size_t proto__transaction_get_fast_record_response__pack_to_buffer
                     (const Proto__TransactionGetFastRecordResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__TransactionGetFastRecordResponse *
       proto__transaction_get_fast_record_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__transaction_get_fast_record_response__free_unpacked
                     (Proto__TransactionGetFastRecordResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__TransactionGetFastRecordQuery_Closure)
                 (const Proto__TransactionGetFastRecordQuery *message,
                  void *closure_data);
typedef void (*Proto__TransactionGetFastRecordResponse_Closure)
                 (const Proto__TransactionGetFastRecordResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__transaction_get_fast_record_query__descriptor;
extern const ProtobufCMessageDescriptor proto__transaction_get_fast_record_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TransactionGetFastRecord_2eproto__INCLUDED */
