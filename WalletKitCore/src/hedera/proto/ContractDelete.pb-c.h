/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ContractDelete.proto */

#ifndef PROTOBUF_C_ContractDelete_2eproto__INCLUDED
#define PROTOBUF_C_ContractDelete_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"

typedef struct Proto__ContractDeleteTransactionBody Proto__ContractDeleteTransactionBody;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  PROTO__CONTRACT_DELETE_TRANSACTION_BODY__OBTAINERS__NOT_SET = 0,
  PROTO__CONTRACT_DELETE_TRANSACTION_BODY__OBTAINERS_TRANSFER_ACCOUNT_ID = 2,
  PROTO__CONTRACT_DELETE_TRANSACTION_BODY__OBTAINERS_TRANSFER_CONTRACT_ID = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__CONTRACT_DELETE_TRANSACTION_BODY__OBTAINERS__CASE)
} Proto__ContractDeleteTransactionBody__ObtainersCase;

/*
 *At consensus, marks a contract as deleted and transfers its remaining hBars, if any, to a designated receiver. After a contract is deleted, it can no longer be called.
 *If the target contract is immutable (that is, was created without an admin key), then this transaction resolves to MODIFYING_IMMUTABLE_CONTRACT.
 *--- Signing Requirements ---
 *1. The admin key of the target contract must sign.
 *2. If the transfer account or contract has receiverSigRequired, its associated key must also sign. 
 */
struct  Proto__ContractDeleteTransactionBody
{
  ProtobufCMessage base;
  /*
   * The id of the contract to be deleted
   */
  Proto__ContractID *contractid;
  Proto__ContractDeleteTransactionBody__ObtainersCase obtainers_case;
  union {
    /*
     * The id of an account to receive any remaining hBars from the deleted contract
     */
    Proto__AccountID *transferaccountid;
    /*
     * The id of a contract to receive any remaining hBars from the deleted contract
     */
    Proto__ContractID *transfercontractid;
  };
};
#define PROTO__CONTRACT_DELETE_TRANSACTION_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__contract_delete_transaction_body__descriptor) \
    , NULL, PROTO__CONTRACT_DELETE_TRANSACTION_BODY__OBTAINERS__NOT_SET, {0} }


/* Proto__ContractDeleteTransactionBody methods */
void   proto__contract_delete_transaction_body__init
                     (Proto__ContractDeleteTransactionBody         *message);
size_t proto__contract_delete_transaction_body__get_packed_size
                     (const Proto__ContractDeleteTransactionBody   *message);
size_t proto__contract_delete_transaction_body__pack
                     (const Proto__ContractDeleteTransactionBody   *message,
                      uint8_t             *out);
size_t proto__contract_delete_transaction_body__pack_to_buffer
                     (const Proto__ContractDeleteTransactionBody   *message,
                      ProtobufCBuffer     *buffer);
Proto__ContractDeleteTransactionBody *
       proto__contract_delete_transaction_body__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__contract_delete_transaction_body__free_unpacked
                     (Proto__ContractDeleteTransactionBody *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__ContractDeleteTransactionBody_Closure)
                 (const Proto__ContractDeleteTransactionBody *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__contract_delete_transaction_body__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ContractDelete_2eproto__INCLUDED */
