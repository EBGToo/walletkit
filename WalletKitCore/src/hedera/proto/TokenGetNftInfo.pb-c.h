/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TokenGetNftInfo.proto */

#ifndef PROTOBUF_C_TokenGetNftInfo_2eproto__INCLUDED
#define PROTOBUF_C_TokenGetNftInfo_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"
#include "Timestamp.pb-c.h"

typedef struct Proto__NftID Proto__NftID;
typedef struct Proto__TokenGetNftInfoQuery Proto__TokenGetNftInfoQuery;
typedef struct Proto__TokenNftInfo Proto__TokenNftInfo;
typedef struct Proto__TokenGetNftInfoResponse Proto__TokenGetNftInfoResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Represents an NFT on the Ledger 
 */
struct  Proto__NftID
{
  ProtobufCMessage base;
  /*
   * The (non-fungible) token of which this NFT is an instance
   */
  Proto__TokenID *tokenid;
  /*
   * The unique identifier of this instance
   */
  int64_t serialnumber;
};
#define PROTO__NFT_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__nft_id__descriptor) \
    , NULL, 0 }


/*
 * Applicable only to tokens of type NON_FUNGIBLE_UNIQUE. Gets info on a NFT for a given TokenID (of type NON_FUNGIBLE_UNIQUE) and serial number 
 */
struct  Proto__TokenGetNftInfoQuery
{
  ProtobufCMessage base;
  /*
   * Standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
   */
  Proto__QueryHeader *header;
  /*
   * The ID of the NFT
   */
  Proto__NftID *nftid;
};
#define PROTO__TOKEN_GET_NFT_INFO_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__token_get_nft_info_query__descriptor) \
    , NULL, NULL }


struct  Proto__TokenNftInfo
{
  ProtobufCMessage base;
  /*
   * The ID of the NFT
   */
  Proto__NftID *nftid;
  /*
   * The current owner of the NFT
   */
  Proto__AccountID *accountid;
  /*
   * The effective consensus timestamp at which the NFT was minted
   */
  Proto__Timestamp *creationtime;
  /*
   * Represents the unique metadata of the NFT
   */
  ProtobufCBinaryData metadata;
};
#define PROTO__TOKEN_NFT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__token_nft_info__descriptor) \
    , NULL, NULL, NULL, {0,NULL} }


struct  Proto__TokenGetNftInfoResponse
{
  ProtobufCMessage base;
  /*
   * Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
   */
  Proto__ResponseHeader *header;
  /*
   * The information about this NFT
   */
  Proto__TokenNftInfo *nft;
};
#define PROTO__TOKEN_GET_NFT_INFO_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__token_get_nft_info_response__descriptor) \
    , NULL, NULL }


/* Proto__NftID methods */
void   proto__nft_id__init
                     (Proto__NftID         *message);
size_t proto__nft_id__get_packed_size
                     (const Proto__NftID   *message);
size_t proto__nft_id__pack
                     (const Proto__NftID   *message,
                      uint8_t             *out);
size_t proto__nft_id__pack_to_buffer
                     (const Proto__NftID   *message,
                      ProtobufCBuffer     *buffer);
Proto__NftID *
       proto__nft_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__nft_id__free_unpacked
                     (Proto__NftID *message,
                      ProtobufCAllocator *allocator);
/* Proto__TokenGetNftInfoQuery methods */
void   proto__token_get_nft_info_query__init
                     (Proto__TokenGetNftInfoQuery         *message);
size_t proto__token_get_nft_info_query__get_packed_size
                     (const Proto__TokenGetNftInfoQuery   *message);
size_t proto__token_get_nft_info_query__pack
                     (const Proto__TokenGetNftInfoQuery   *message,
                      uint8_t             *out);
size_t proto__token_get_nft_info_query__pack_to_buffer
                     (const Proto__TokenGetNftInfoQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__TokenGetNftInfoQuery *
       proto__token_get_nft_info_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__token_get_nft_info_query__free_unpacked
                     (Proto__TokenGetNftInfoQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__TokenNftInfo methods */
void   proto__token_nft_info__init
                     (Proto__TokenNftInfo         *message);
size_t proto__token_nft_info__get_packed_size
                     (const Proto__TokenNftInfo   *message);
size_t proto__token_nft_info__pack
                     (const Proto__TokenNftInfo   *message,
                      uint8_t             *out);
size_t proto__token_nft_info__pack_to_buffer
                     (const Proto__TokenNftInfo   *message,
                      ProtobufCBuffer     *buffer);
Proto__TokenNftInfo *
       proto__token_nft_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__token_nft_info__free_unpacked
                     (Proto__TokenNftInfo *message,
                      ProtobufCAllocator *allocator);
/* Proto__TokenGetNftInfoResponse methods */
void   proto__token_get_nft_info_response__init
                     (Proto__TokenGetNftInfoResponse         *message);
size_t proto__token_get_nft_info_response__get_packed_size
                     (const Proto__TokenGetNftInfoResponse   *message);
size_t proto__token_get_nft_info_response__pack
                     (const Proto__TokenGetNftInfoResponse   *message,
                      uint8_t             *out);
size_t proto__token_get_nft_info_response__pack_to_buffer
                     (const Proto__TokenGetNftInfoResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__TokenGetNftInfoResponse *
       proto__token_get_nft_info_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__token_get_nft_info_response__free_unpacked
                     (Proto__TokenGetNftInfoResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__NftID_Closure)
                 (const Proto__NftID *message,
                  void *closure_data);
typedef void (*Proto__TokenGetNftInfoQuery_Closure)
                 (const Proto__TokenGetNftInfoQuery *message,
                  void *closure_data);
typedef void (*Proto__TokenNftInfo_Closure)
                 (const Proto__TokenNftInfo *message,
                  void *closure_data);
typedef void (*Proto__TokenGetNftInfoResponse_Closure)
                 (const Proto__TokenGetNftInfoResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__nft_id__descriptor;
extern const ProtobufCMessageDescriptor proto__token_get_nft_info_query__descriptor;
extern const ProtobufCMessageDescriptor proto__token_nft_info__descriptor;
extern const ProtobufCMessageDescriptor proto__token_get_nft_info_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TokenGetNftInfo_2eproto__INCLUDED */
