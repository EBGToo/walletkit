/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: CryptoGetAccountRecords.proto */

#ifndef PROTOBUF_C_CryptoGetAccountRecords_2eproto__INCLUDED
#define PROTOBUF_C_CryptoGetAccountRecords_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "TransactionRecord.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"

typedef struct Proto__CryptoGetAccountRecordsQuery Proto__CryptoGetAccountRecordsQuery;
typedef struct Proto__CryptoGetAccountRecordsResponse Proto__CryptoGetAccountRecordsResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Requests records of all transactions for which the given account was the effective payer in the last 3 minutes of consensus time and <tt>ledger.keepRecordsInState=true</tt> was true during <tt>handleTransaction</tt>.
 */
struct  Proto__CryptoGetAccountRecordsQuery
{
  ProtobufCMessage base;
  /*
   * Standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
   */
  Proto__QueryHeader *header;
  /*
   * The account ID for which the records should be retrieved
   */
  Proto__AccountID *accountid;
};
#define PROTO__CRYPTO_GET_ACCOUNT_RECORDS_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__crypto_get_account_records_query__descriptor) \
    , NULL, NULL }


/*
 * Returns records of all transactions for which the given account was the effective payer in the last 3 minutes of consensus time and <tt>ledger.keepRecordsInState=true</tt> was true during <tt>handleTransaction</tt>.
 */
struct  Proto__CryptoGetAccountRecordsResponse
{
  ProtobufCMessage base;
  /*
   * Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
   */
  Proto__ResponseHeader *header;
  /*
   * The account that this record is for
   */
  Proto__AccountID *accountid;
  /*
   * List of records
   */
  size_t n_records;
  Proto__TransactionRecord **records;
};
#define PROTO__CRYPTO_GET_ACCOUNT_RECORDS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__crypto_get_account_records_response__descriptor) \
    , NULL, NULL, 0,NULL }


/* Proto__CryptoGetAccountRecordsQuery methods */
void   proto__crypto_get_account_records_query__init
                     (Proto__CryptoGetAccountRecordsQuery         *message);
size_t proto__crypto_get_account_records_query__get_packed_size
                     (const Proto__CryptoGetAccountRecordsQuery   *message);
size_t proto__crypto_get_account_records_query__pack
                     (const Proto__CryptoGetAccountRecordsQuery   *message,
                      uint8_t             *out);
size_t proto__crypto_get_account_records_query__pack_to_buffer
                     (const Proto__CryptoGetAccountRecordsQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__CryptoGetAccountRecordsQuery *
       proto__crypto_get_account_records_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__crypto_get_account_records_query__free_unpacked
                     (Proto__CryptoGetAccountRecordsQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__CryptoGetAccountRecordsResponse methods */
void   proto__crypto_get_account_records_response__init
                     (Proto__CryptoGetAccountRecordsResponse         *message);
size_t proto__crypto_get_account_records_response__get_packed_size
                     (const Proto__CryptoGetAccountRecordsResponse   *message);
size_t proto__crypto_get_account_records_response__pack
                     (const Proto__CryptoGetAccountRecordsResponse   *message,
                      uint8_t             *out);
size_t proto__crypto_get_account_records_response__pack_to_buffer
                     (const Proto__CryptoGetAccountRecordsResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__CryptoGetAccountRecordsResponse *
       proto__crypto_get_account_records_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__crypto_get_account_records_response__free_unpacked
                     (Proto__CryptoGetAccountRecordsResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__CryptoGetAccountRecordsQuery_Closure)
                 (const Proto__CryptoGetAccountRecordsQuery *message,
                  void *closure_data);
typedef void (*Proto__CryptoGetAccountRecordsResponse_Closure)
                 (const Proto__CryptoGetAccountRecordsResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__crypto_get_account_records_query__descriptor;
extern const ProtobufCMessageDescriptor proto__crypto_get_account_records_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_CryptoGetAccountRecords_2eproto__INCLUDED */
