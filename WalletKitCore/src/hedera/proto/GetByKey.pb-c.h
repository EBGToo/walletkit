/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: GetByKey.proto */

#ifndef PROTOBUF_C_GetByKey_2eproto__INCLUDED
#define PROTOBUF_C_GetByKey_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"
#include "CryptoAddLiveHash.pb-c.h"

typedef struct Proto__GetByKeyQuery Proto__GetByKeyQuery;
typedef struct Proto__EntityID Proto__EntityID;
typedef struct Proto__GetByKeyResponse Proto__GetByKeyResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Get all accounts, claims, files, and smart contract instances whose associated keys include the given Key. The given Key must not be a contractID or a ThresholdKey. This is not yet implemented in the API, but will be in the future. 
 */
struct  Proto__GetByKeyQuery
{
  ProtobufCMessage base;
  /*
   * Standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
   */
  Proto__QueryHeader *header;
  /*
   * The key to search for. It must not contain a contractID nor a ThresholdSignature.
   */
  Proto__Key *key;
};
#define PROTO__GET_BY_KEY_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__get_by_key_query__descriptor) \
    , NULL, NULL }


typedef enum {
  PROTO__ENTITY_ID__ENTITY__NOT_SET = 0,
  PROTO__ENTITY_ID__ENTITY_ACCOUNT_ID = 1,
  PROTO__ENTITY_ID__ENTITY_LIVE_HASH = 2,
  PROTO__ENTITY_ID__ENTITY_FILE_ID = 3,
  PROTO__ENTITY_ID__ENTITY_CONTRACT_ID = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__ENTITY_ID__ENTITY__CASE)
} Proto__EntityID__EntityCase;

/*
 * the ID for a single entity (account, livehash, file, or smart contract instance) 
 */
struct  Proto__EntityID
{
  ProtobufCMessage base;
  Proto__EntityID__EntityCase entity_case;
  union {
    /*
     * The Account ID for the cryptocurrency account
     */
    Proto__AccountID *accountid;
    /*
     * A uniquely identifying livehash of an acount
     */
    Proto__LiveHash *livehash;
    /*
     * The file ID of the file
     */
    Proto__FileID *fileid;
    /*
     * The smart contract ID that identifies instance
     */
    Proto__ContractID *contractid;
  };
};
#define PROTO__ENTITY_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__entity_id__descriptor) \
    , PROTO__ENTITY_ID__ENTITY__NOT_SET, {0} }


/*
 * Response when the client sends the node GetByKeyQuery 
 */
struct  Proto__GetByKeyResponse
{
  ProtobufCMessage base;
  /*
   *Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
   */
  Proto__ResponseHeader *header;
  /*
   * The list of entities that include this public key in their associated Key list
   */
  size_t n_entities;
  Proto__EntityID **entities;
};
#define PROTO__GET_BY_KEY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__get_by_key_response__descriptor) \
    , NULL, 0,NULL }


/* Proto__GetByKeyQuery methods */
void   proto__get_by_key_query__init
                     (Proto__GetByKeyQuery         *message);
size_t proto__get_by_key_query__get_packed_size
                     (const Proto__GetByKeyQuery   *message);
size_t proto__get_by_key_query__pack
                     (const Proto__GetByKeyQuery   *message,
                      uint8_t             *out);
size_t proto__get_by_key_query__pack_to_buffer
                     (const Proto__GetByKeyQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__GetByKeyQuery *
       proto__get_by_key_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__get_by_key_query__free_unpacked
                     (Proto__GetByKeyQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__EntityID methods */
void   proto__entity_id__init
                     (Proto__EntityID         *message);
size_t proto__entity_id__get_packed_size
                     (const Proto__EntityID   *message);
size_t proto__entity_id__pack
                     (const Proto__EntityID   *message,
                      uint8_t             *out);
size_t proto__entity_id__pack_to_buffer
                     (const Proto__EntityID   *message,
                      ProtobufCBuffer     *buffer);
Proto__EntityID *
       proto__entity_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__entity_id__free_unpacked
                     (Proto__EntityID *message,
                      ProtobufCAllocator *allocator);
/* Proto__GetByKeyResponse methods */
void   proto__get_by_key_response__init
                     (Proto__GetByKeyResponse         *message);
size_t proto__get_by_key_response__get_packed_size
                     (const Proto__GetByKeyResponse   *message);
size_t proto__get_by_key_response__pack
                     (const Proto__GetByKeyResponse   *message,
                      uint8_t             *out);
size_t proto__get_by_key_response__pack_to_buffer
                     (const Proto__GetByKeyResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__GetByKeyResponse *
       proto__get_by_key_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__get_by_key_response__free_unpacked
                     (Proto__GetByKeyResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__GetByKeyQuery_Closure)
                 (const Proto__GetByKeyQuery *message,
                  void *closure_data);
typedef void (*Proto__EntityID_Closure)
                 (const Proto__EntityID *message,
                  void *closure_data);
typedef void (*Proto__GetByKeyResponse_Closure)
                 (const Proto__GetByKeyResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__get_by_key_query__descriptor;
extern const ProtobufCMessageDescriptor proto__entity_id__descriptor;
extern const ProtobufCMessageDescriptor proto__get_by_key_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_GetByKey_2eproto__INCLUDED */
