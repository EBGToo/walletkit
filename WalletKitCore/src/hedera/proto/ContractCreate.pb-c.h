/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ContractCreate.proto */

#ifndef PROTOBUF_C_ContractCreate_2eproto__INCLUDED
#define PROTOBUF_C_ContractCreate_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "Duration.pb-c.h"

typedef struct Proto__ContractCreateTransactionBody Proto__ContractCreateTransactionBody;


/* --- enums --- */


/* --- messages --- */

/*
 *Start a new smart contract instance. After the instance is created, the ContractID for it is in the receipt, and can be
 *retrieved by the Record or with a GetByKey query. The instance will run the bytecode stored in a previously created
 *file, referenced either by FileID or by the transaction ID of the transaction that created the file
 *The constructor will be executed using the given amount of gas, and any unspent gas will be refunded to the paying account. Constructor inputs come from the given constructorParameters.
 * The instance will exist for autoRenewPeriod seconds. When that is reached, it will renew itself for another autoRenewPeriod seconds by charging its associated cryptocurrency account (which it creates here). If it has insufficient cryptocurrency to extend that long, it will extend as long as it can. If its balance is zero, the instance will be deleted.
 * A smart contract instance normally enforces rules, so "the code is law". For example, an ERC-20 contract prevents a transfer from being undone without a signature by the recipient of the transfer. This is always enforced if the contract instance was created with the adminKeys being null. But for some uses, it might be desirable to create something like an ERC-20 contract that has a specific group of trusted individuals who can act as a "supreme court" with the ability to override the normal operation, when a sufficient number of them agree to do so. If adminKeys is not null, then they can sign a transaction that can change the state of the smart contract in arbitrary ways, such as to reverse a transaction that violates some standard of behavior that is not covered by the code itself. The admin keys can also be used to change the autoRenewPeriod, and change the adminKeys field itself. The API currently does not implement this ability. But it does allow the adminKeys field to be set and queried, and will in the future implement such admin abilities for any instance that has a non-null adminKeys.
 * If this constructor stores information, it is charged gas to store it. There is a fee in hbars to maintain that storage until the expiration time, and that fee is added as part of the transaction fee.
 * An entity (account, file, or smart contract instance) must be created in a particular realm. If the realmID is left null, then a new realm will be created with the given admin key. If a new realm has a null adminKey, then anyone can create/modify/delete entities in that realm. But if an admin key is given, then any transaction to create/modify/delete an entity in that realm must be signed by that key, though anyone can still call functions on smart contract instances that exist in that realm. A realm ceases to exist when everything within it has expired and no longer exists.
 * The current API ignores shardID, realmID, and newRealmAdminKey, and creates everything in shard 0 and realm 0, with a null key. Future versions of the API will support multiple realms and multiple shards.
 * The optional memo field can contain a string whose length is up to 100 bytes. That is the size after Unicode NFD then UTF-8 conversion. This field can be used to describe the smart contract. It could also be used for other purposes. One recommended purpose is to hold a hexadecimal string that is the SHA-384 hash of a PDF file containing a human-readable legal contract. Then, if the admin keys are the public keys of human arbitrators, they can use that legal document to guide their decisions during a binding arbitration tribunal, convened to consider any changes to the smart contract in the future. The memo field can only be changed using the admin keys. If there are no admin keys, then it cannot be changed after the smart contract is created.
 */
struct  Proto__ContractCreateTransactionBody
{
  ProtobufCMessage base;
  /*
   * the file containing the smart contract byte code. A copy will be made and held by the contract instance, and have the same expiration time as the instance. The file is referenced one of two ways:
   */
  Proto__FileID *fileid;
  /*
   * the state of the instance and its fields can be modified arbitrarily if this key signs a transaction to modify it. If this is null, then such modifications are not possible, and there is no administrator that can override the normal operation of this smart contract instance. Note that if it is created with no admin keys, then there is no administrator to authorize changing the admin keys, so there can never be any admin keys for that instance.
   */
  Proto__Key *adminkey;
  /*
   * gas to run the constructor
   */
  int64_t gas;
  /*
   * initial number of tinybars to put into the cryptocurrency account associated with and owned by the smart contract
   */
  int64_t initialbalance;
  /*
   * ID of the account to which this account is proxy staked. If proxyAccountID is null, or is an invalid account, or is an account that isn't a node, then this account is automatically proxy staked to a node chosen by the network, but without earning payments. If the proxyAccountID account refuses to accept proxy staking , or if it is not currently running a node, then it will behave as if  proxyAccountID was null.
   */
  Proto__AccountID *proxyaccountid;
  /*
   * the instance will charge its account every this many seconds to renew for this long
   */
  Proto__Duration *autorenewperiod;
  /*
   * parameters to pass to the constructor
   */
  ProtobufCBinaryData constructorparameters;
  /*
   * shard in which to create this
   */
  Proto__ShardID *shardid;
  /*
   * realm in which to create this (leave this null to create a new realm)
   */
  Proto__RealmID *realmid;
  /*
   * if realmID is null, then this the admin key for the new realm that will be created
   */
  Proto__Key *newrealmadminkey;
  /*
   * the memo that was submitted as part of the contract (max 100 bytes)
   */
  char *memo;
};
#define PROTO__CONTRACT_CREATE_TRANSACTION_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__contract_create_transaction_body__descriptor) \
    , NULL, NULL, 0, 0, NULL, NULL, {0,NULL}, NULL, NULL, NULL, (char *)protobuf_c_empty_string }


/* Proto__ContractCreateTransactionBody methods */
void   proto__contract_create_transaction_body__init
                     (Proto__ContractCreateTransactionBody         *message);
size_t proto__contract_create_transaction_body__get_packed_size
                     (const Proto__ContractCreateTransactionBody   *message);
size_t proto__contract_create_transaction_body__pack
                     (const Proto__ContractCreateTransactionBody   *message,
                      uint8_t             *out);
size_t proto__contract_create_transaction_body__pack_to_buffer
                     (const Proto__ContractCreateTransactionBody   *message,
                      ProtobufCBuffer     *buffer);
Proto__ContractCreateTransactionBody *
       proto__contract_create_transaction_body__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__contract_create_transaction_body__free_unpacked
                     (Proto__ContractCreateTransactionBody *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__ContractCreateTransactionBody_Closure)
                 (const Proto__ContractCreateTransactionBody *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__contract_create_transaction_body__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ContractCreate_2eproto__INCLUDED */
