/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TokenFreezeAccount.proto */

#ifndef PROTOBUF_C_TokenFreezeAccount_2eproto__INCLUDED
#define PROTOBUF_C_TokenFreezeAccount_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"

typedef struct Proto__TokenFreezeAccountTransactionBody Proto__TokenFreezeAccountTransactionBody;


/* --- enums --- */


/* --- messages --- */

/*
 * Freezes transfers of the specified token for the account. Must be signed by the Token's freezeKey.
 *If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.
 *If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.
 *If the provided token is not found, the transaction will resolve to INVALID_TOKEN_ID.
 *If the provided token has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.
 *If an Association between the provided token and account is not found, the transaction will resolve to TOKEN_NOT_ASSOCIATED_TO_ACCOUNT.
 *If no Freeze Key is defined, the transaction will resolve to TOKEN_HAS_NO_FREEZE_KEY.
 *Once executed the Account is marked as Frozen and will not be able to receive or send tokens unless unfrozen. The operation is idempotent.
 */
struct  Proto__TokenFreezeAccountTransactionBody
{
  ProtobufCMessage base;
  /*
   * The token for which this account will be frozen. If token does not exist, transaction results in INVALID_TOKEN_ID
   */
  Proto__TokenID *token;
  /*
   * The account to be frozen
   */
  Proto__AccountID *account;
};
#define PROTO__TOKEN_FREEZE_ACCOUNT_TRANSACTION_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__token_freeze_account_transaction_body__descriptor) \
    , NULL, NULL }


/* Proto__TokenFreezeAccountTransactionBody methods */
void   proto__token_freeze_account_transaction_body__init
                     (Proto__TokenFreezeAccountTransactionBody         *message);
size_t proto__token_freeze_account_transaction_body__get_packed_size
                     (const Proto__TokenFreezeAccountTransactionBody   *message);
size_t proto__token_freeze_account_transaction_body__pack
                     (const Proto__TokenFreezeAccountTransactionBody   *message,
                      uint8_t             *out);
size_t proto__token_freeze_account_transaction_body__pack_to_buffer
                     (const Proto__TokenFreezeAccountTransactionBody   *message,
                      ProtobufCBuffer     *buffer);
Proto__TokenFreezeAccountTransactionBody *
       proto__token_freeze_account_transaction_body__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__token_freeze_account_transaction_body__free_unpacked
                     (Proto__TokenFreezeAccountTransactionBody *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__TokenFreezeAccountTransactionBody_Closure)
                 (const Proto__TokenFreezeAccountTransactionBody *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__token_freeze_account_transaction_body__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TokenFreezeAccount_2eproto__INCLUDED */
