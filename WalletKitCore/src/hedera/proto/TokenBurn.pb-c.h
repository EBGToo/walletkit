/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TokenBurn.proto */

#ifndef PROTOBUF_C_TokenBurn_2eproto__INCLUDED
#define PROTOBUF_C_TokenBurn_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"

typedef struct Proto__TokenBurnTransactionBody Proto__TokenBurnTransactionBody;


/* --- enums --- */


/* --- messages --- */

/*
 *Burns tokens from the Token's treasury Account. If no Supply Key is defined, the transaction will resolve to TOKEN_HAS_NO_SUPPLY_KEY.
 *The operation decreases the Total Supply of the Token. Total supply cannot go below zero.
 *The amount provided must be in the lowest denomination possible. Example:
 *Token A has 2 decimals. In order to burn 100 tokens, one must provide amount of 10000. In order to burn 100.55 tokens, one must provide amount of 10055.
 *For non fungible tokens the transaction body accepts serialNumbers list of integers as a parameter.
 *If neither the amount nor the serialNumbers get filled, a INVALID_TOKEN_BURN_AMOUNT response code will be returned.
 *If both amount and serialNumbers get filled, a INVALID_TRANSACTION_BODY response code will be returned.
 *If the serialNumbers' list count is greater than the batch size limit global dynamic property, a BATCH_SIZE_LIMIT_EXCEEDED response code will be returned.
 *If the serialNumbers list contains a non-positive integer as a serial number, a INVALID_NFT_ID response code will be returned.
 */
struct  Proto__TokenBurnTransactionBody
{
  ProtobufCMessage base;
  /*
   * The token for which to burn tokens. If token does not exist, transaction results in INVALID_TOKEN_ID
   */
  Proto__TokenID *token;
  /*
   * Applicable to tokens of type FUNGIBLE_COMMON. The amount to burn from the Treasury Account. Amount must be a positive non-zero number, not bigger than the token balance of the treasury account (0; balance], represented in the lowest denomination.
   */
  uint64_t amount;
  /*
   * Applicable to tokens of type NON_FUNGIBLE_UNIQUE. The list of serial numbers to be burned.
   */
  size_t n_serialnumbers;
  int64_t *serialnumbers;
};
#define PROTO__TOKEN_BURN_TRANSACTION_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__token_burn_transaction_body__descriptor) \
    , NULL, 0, 0,NULL }


/* Proto__TokenBurnTransactionBody methods */
void   proto__token_burn_transaction_body__init
                     (Proto__TokenBurnTransactionBody         *message);
size_t proto__token_burn_transaction_body__get_packed_size
                     (const Proto__TokenBurnTransactionBody   *message);
size_t proto__token_burn_transaction_body__pack
                     (const Proto__TokenBurnTransactionBody   *message,
                      uint8_t             *out);
size_t proto__token_burn_transaction_body__pack_to_buffer
                     (const Proto__TokenBurnTransactionBody   *message,
                      ProtobufCBuffer     *buffer);
Proto__TokenBurnTransactionBody *
       proto__token_burn_transaction_body__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__token_burn_transaction_body__free_unpacked
                     (Proto__TokenBurnTransactionBody *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__TokenBurnTransactionBody_Closure)
                 (const Proto__TokenBurnTransactionBody *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__token_burn_transaction_body__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TokenBurn_2eproto__INCLUDED */
