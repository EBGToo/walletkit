/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ConsensusUpdateTopic.proto */

#ifndef PROTOBUF_C_ConsensusUpdateTopic_2eproto__INCLUDED
#define PROTOBUF_C_ConsensusUpdateTopic_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "wrappers.pb-c.h"
#include "BasicTypes.pb-c.h"
#include "Duration.pb-c.h"
#include "Timestamp.pb-c.h"

typedef struct Proto__ConsensusUpdateTopicTransactionBody Proto__ConsensusUpdateTopicTransactionBody;


/* --- enums --- */


/* --- messages --- */

/*
 * All fields left null will not be updated.
 * See [ConsensusService.updateTopic()](#proto.ConsensusService)
 */
struct  Proto__ConsensusUpdateTopicTransactionBody
{
  ProtobufCMessage base;
  Proto__TopicID *topicid;
  /*
   * If set, the new memo to be associated with the topic (UTF-8 encoding max 100 bytes)
   */
  Google__Protobuf__StringValue *memo;
  /*
   * Effective consensus timestamp at (and after) which all consensus transactions and queries will fail.
   * The expirationTime may be no longer than MAX_AUTORENEW_PERIOD (8000001 seconds) from the consensus timestamp of
   * this transaction.
   * On topics with no adminKey, extending the expirationTime is the only updateTopic option allowed on the topic.
   * If unspecified, no change.
   */
  Proto__Timestamp *expirationtime;
  /*
   * Access control for update/delete of the topic.
   * If unspecified, no change.
   * If empty keyList - the adminKey is cleared.
   */
  Proto__Key *adminkey;
  /*
   * Access control for ConsensusService.submitMessage.
   * If unspecified, no change.
   * If empty keyList - the submitKey is cleared.
   */
  Proto__Key *submitkey;
  /*
   * The amount of time to extend the topic's lifetime automatically at expirationTime if the autoRenewAccount is
   * configured and has funds (once autoRenew functionality is supported by HAPI).
   * Limited to between MIN_AUTORENEW_PERIOD (6999999 seconds) and MAX_AUTORENEW_PERIOD (8000001 seconds) by
   * servers-side configuration (which may change).
   * If unspecified, no change.
   */
  Proto__Duration *autorenewperiod;
  /*
   * Optional account to be used at the topic's expirationTime to extend the life of the topic.
   * Once autoRenew functionality is supported by HAPI, the topic lifetime will be extended up to a maximum of the
   * autoRenewPeriod or however long the topic can be extended using all funds on the account (whichever is the
   * smaller duration/amount).
   * If specified as the default value (0.0.0), the autoRenewAccount will be removed.
   * If unspecified, no change.
   */
  Proto__AccountID *autorenewaccount;
};
#define PROTO__CONSENSUS_UPDATE_TOPIC_TRANSACTION_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__consensus_update_topic_transaction_body__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/* Proto__ConsensusUpdateTopicTransactionBody methods */
void   proto__consensus_update_topic_transaction_body__init
                     (Proto__ConsensusUpdateTopicTransactionBody         *message);
size_t proto__consensus_update_topic_transaction_body__get_packed_size
                     (const Proto__ConsensusUpdateTopicTransactionBody   *message);
size_t proto__consensus_update_topic_transaction_body__pack
                     (const Proto__ConsensusUpdateTopicTransactionBody   *message,
                      uint8_t             *out);
size_t proto__consensus_update_topic_transaction_body__pack_to_buffer
                     (const Proto__ConsensusUpdateTopicTransactionBody   *message,
                      ProtobufCBuffer     *buffer);
Proto__ConsensusUpdateTopicTransactionBody *
       proto__consensus_update_topic_transaction_body__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__consensus_update_topic_transaction_body__free_unpacked
                     (Proto__ConsensusUpdateTopicTransactionBody *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__ConsensusUpdateTopicTransactionBody_Closure)
                 (const Proto__ConsensusUpdateTopicTransactionBody *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__consensus_update_topic_transaction_body__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ConsensusUpdateTopic_2eproto__INCLUDED */
