/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: CustomFees.proto */

#ifndef PROTOBUF_C_CustomFees_2eproto__INCLUDED
#define PROTOBUF_C_CustomFees_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"

typedef struct Proto__FractionalFee Proto__FractionalFee;
typedef struct Proto__FixedFee Proto__FixedFee;
typedef struct Proto__CustomFee Proto__CustomFee;
typedef struct Proto__AssessedCustomFee Proto__AssessedCustomFee;


/* --- enums --- */


/* --- messages --- */

/*
 * A fraction of the transferred units of a token to assess as a fee. The amount assessed
 *will never be less than the given minimum_amount, and never greater than the given maximum_amount. 
 *The denomination is always units of the token to which this fractional fee is attached. 
 */
struct  Proto__FractionalFee
{
  ProtobufCMessage base;
  /*
   * The fraction of the transferred units to assess as a fee
   */
  Proto__Fraction *fractional_amount;
  /*
   * The minimum amount to assess
   */
  int64_t minimum_amount;
  /*
   * The maximum amount to assess (zero implies no maximum)
   */
  int64_t maximum_amount;
};
#define PROTO__FRACTIONAL_FEE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__fractional_fee__descriptor) \
    , NULL, 0, 0 }


/*
 * A fixed number of units (hbar or token) to assess as a fee during a CryptoTransfer 
 *that transfers units of the token to which this fixed fee is attached. 
 */
struct  Proto__FixedFee
{
  ProtobufCMessage base;
  /*
   * The number of units to assess as a fee
   */
  int64_t amount;
  /*
   * The denomination of the fee; taken as hbar if left unset and, in a TokenCreate, taken as the id of the newly created token if set to the sentinel value of 0.0.0
   */
  Proto__TokenID *denominating_token_id;
};
#define PROTO__FIXED_FEE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__fixed_fee__descriptor) \
    , 0, NULL }


typedef enum {
  PROTO__CUSTOM_FEE__FEE__NOT_SET = 0,
  PROTO__CUSTOM_FEE__FEE_FIXED_FEE = 1,
  PROTO__CUSTOM_FEE__FEE_FRACTIONAL_FEE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__CUSTOM_FEE__FEE__CASE)
} Proto__CustomFee__FeeCase;

/*
 * A transfer fee to assess during a CryptoTransfer that transfers units of the token 
 *to which the fee is attached. A custom fee may be either fixed or fractional, and must specify
 *a fee collector account to receive the assessed fees. Only positive fees may be assessed. 
 */
struct  Proto__CustomFee
{
  ProtobufCMessage base;
  /*
   * The account to receive the custom fee
   */
  Proto__AccountID *fee_collector_account_id;
  Proto__CustomFee__FeeCase fee_case;
  union {
    /*
     * Fixed fee to be charged
     */
    Proto__FixedFee *fixed_fee;
    /*
     * Fractional fee to be charged
     */
    Proto__FractionalFee *fractional_fee;
  };
};
#define PROTO__CUSTOM_FEE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__custom_fee__descriptor) \
    , NULL, PROTO__CUSTOM_FEE__FEE__NOT_SET, {0} }


/*
 * A custom transfer fee that was assessed during handling of a CryptoTransfer. 
 */
struct  Proto__AssessedCustomFee
{
  ProtobufCMessage base;
  /*
   * The number of units assessed for the fee
   */
  int64_t amount;
  /*
   * The denomination of the fee; taken as hbar if left unset
   */
  Proto__TokenID *token_id;
  /*
   * The account to receive the assessed fee
   */
  Proto__AccountID *fee_collector_account_id;
};
#define PROTO__ASSESSED_CUSTOM_FEE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__assessed_custom_fee__descriptor) \
    , 0, NULL, NULL }


/* Proto__FractionalFee methods */
void   proto__fractional_fee__init
                     (Proto__FractionalFee         *message);
size_t proto__fractional_fee__get_packed_size
                     (const Proto__FractionalFee   *message);
size_t proto__fractional_fee__pack
                     (const Proto__FractionalFee   *message,
                      uint8_t             *out);
size_t proto__fractional_fee__pack_to_buffer
                     (const Proto__FractionalFee   *message,
                      ProtobufCBuffer     *buffer);
Proto__FractionalFee *
       proto__fractional_fee__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__fractional_fee__free_unpacked
                     (Proto__FractionalFee *message,
                      ProtobufCAllocator *allocator);
/* Proto__FixedFee methods */
void   proto__fixed_fee__init
                     (Proto__FixedFee         *message);
size_t proto__fixed_fee__get_packed_size
                     (const Proto__FixedFee   *message);
size_t proto__fixed_fee__pack
                     (const Proto__FixedFee   *message,
                      uint8_t             *out);
size_t proto__fixed_fee__pack_to_buffer
                     (const Proto__FixedFee   *message,
                      ProtobufCBuffer     *buffer);
Proto__FixedFee *
       proto__fixed_fee__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__fixed_fee__free_unpacked
                     (Proto__FixedFee *message,
                      ProtobufCAllocator *allocator);
/* Proto__CustomFee methods */
void   proto__custom_fee__init
                     (Proto__CustomFee         *message);
size_t proto__custom_fee__get_packed_size
                     (const Proto__CustomFee   *message);
size_t proto__custom_fee__pack
                     (const Proto__CustomFee   *message,
                      uint8_t             *out);
size_t proto__custom_fee__pack_to_buffer
                     (const Proto__CustomFee   *message,
                      ProtobufCBuffer     *buffer);
Proto__CustomFee *
       proto__custom_fee__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__custom_fee__free_unpacked
                     (Proto__CustomFee *message,
                      ProtobufCAllocator *allocator);
/* Proto__AssessedCustomFee methods */
void   proto__assessed_custom_fee__init
                     (Proto__AssessedCustomFee         *message);
size_t proto__assessed_custom_fee__get_packed_size
                     (const Proto__AssessedCustomFee   *message);
size_t proto__assessed_custom_fee__pack
                     (const Proto__AssessedCustomFee   *message,
                      uint8_t             *out);
size_t proto__assessed_custom_fee__pack_to_buffer
                     (const Proto__AssessedCustomFee   *message,
                      ProtobufCBuffer     *buffer);
Proto__AssessedCustomFee *
       proto__assessed_custom_fee__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__assessed_custom_fee__free_unpacked
                     (Proto__AssessedCustomFee *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__FractionalFee_Closure)
                 (const Proto__FractionalFee *message,
                  void *closure_data);
typedef void (*Proto__FixedFee_Closure)
                 (const Proto__FixedFee *message,
                  void *closure_data);
typedef void (*Proto__CustomFee_Closure)
                 (const Proto__CustomFee *message,
                  void *closure_data);
typedef void (*Proto__AssessedCustomFee_Closure)
                 (const Proto__AssessedCustomFee *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__fractional_fee__descriptor;
extern const ProtobufCMessageDescriptor proto__fixed_fee__descriptor;
extern const ProtobufCMessageDescriptor proto__custom_fee__descriptor;
extern const ProtobufCMessageDescriptor proto__assessed_custom_fee__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_CustomFees_2eproto__INCLUDED */
