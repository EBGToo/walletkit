/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ThrottleDefinitions.proto */

#ifndef PROTOBUF_C_ThrottleDefinitions_2eproto__INCLUDED
#define PROTOBUF_C_ThrottleDefinitions_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"

typedef struct Proto__ThrottleGroup Proto__ThrottleGroup;
typedef struct Proto__ThrottleBucket Proto__ThrottleBucket;
typedef struct Proto__ThrottleDefinitions Proto__ThrottleDefinitions;


/* --- enums --- */


/* --- messages --- */

/*
 * A set of operations which should be collectively throttled at a given milli-ops-per-second limit. 
 */
struct  Proto__ThrottleGroup
{
  ProtobufCMessage base;
  /*
   * The operations to be throttled
   */
  size_t n_operations;
  Proto__HederaFunctionality *operations;
  /*
   * The number of total operations per second across the entire network, multiplied by 1000. So, to choose 3 operations per second (which on a network of 30 nodes is a tenth of an operation per second for each node), set milliOpsPerSec = 3000. And to choose 3.6 ops per second, use milliOpsPerSec = 3600. Minimum allowed value is 1, and maximum allowed value is 9223372.
   */
  uint64_t milliopspersec;
};
#define PROTO__THROTTLE_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__throttle_group__descriptor) \
    , 0,NULL, 0 }


/*
 * A list of throttle groups that should all compete for the same internal bucket. 
 */
struct  Proto__ThrottleBucket
{
  ProtobufCMessage base;
  /*
   * A name for this bucket (primarily for use in logs)
   */
  char *name;
  /*
   * The number of milliseconds required for this bucket to drain completely when full. The product of this number and the least common multiple of the milliOpsPerSec values in this bucket must not exceed 9223372036.
   */
  uint64_t burstperiodms;
  /*
   * The throttle groups competing for this bucket
   */
  size_t n_throttlegroups;
  Proto__ThrottleGroup **throttlegroups;
};
#define PROTO__THROTTLE_BUCKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__throttle_bucket__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0,NULL }


/*
 * A list of throttle buckets which, simultaneously enforced, define the system's throttling policy. 
 *<ol>
 *<li> When an operation appears in more than one throttling bucket, all its buckets must have room
 *or it will be throttled.</li> 
 *<li>An operation assigned to no buckets is always throttled.</li>
 *</ol> 
 */
struct  Proto__ThrottleDefinitions
{
  ProtobufCMessage base;
  size_t n_throttlebuckets;
  Proto__ThrottleBucket **throttlebuckets;
};
#define PROTO__THROTTLE_DEFINITIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__throttle_definitions__descriptor) \
    , 0,NULL }


/* Proto__ThrottleGroup methods */
void   proto__throttle_group__init
                     (Proto__ThrottleGroup         *message);
size_t proto__throttle_group__get_packed_size
                     (const Proto__ThrottleGroup   *message);
size_t proto__throttle_group__pack
                     (const Proto__ThrottleGroup   *message,
                      uint8_t             *out);
size_t proto__throttle_group__pack_to_buffer
                     (const Proto__ThrottleGroup   *message,
                      ProtobufCBuffer     *buffer);
Proto__ThrottleGroup *
       proto__throttle_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__throttle_group__free_unpacked
                     (Proto__ThrottleGroup *message,
                      ProtobufCAllocator *allocator);
/* Proto__ThrottleBucket methods */
void   proto__throttle_bucket__init
                     (Proto__ThrottleBucket         *message);
size_t proto__throttle_bucket__get_packed_size
                     (const Proto__ThrottleBucket   *message);
size_t proto__throttle_bucket__pack
                     (const Proto__ThrottleBucket   *message,
                      uint8_t             *out);
size_t proto__throttle_bucket__pack_to_buffer
                     (const Proto__ThrottleBucket   *message,
                      ProtobufCBuffer     *buffer);
Proto__ThrottleBucket *
       proto__throttle_bucket__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__throttle_bucket__free_unpacked
                     (Proto__ThrottleBucket *message,
                      ProtobufCAllocator *allocator);
/* Proto__ThrottleDefinitions methods */
void   proto__throttle_definitions__init
                     (Proto__ThrottleDefinitions         *message);
size_t proto__throttle_definitions__get_packed_size
                     (const Proto__ThrottleDefinitions   *message);
size_t proto__throttle_definitions__pack
                     (const Proto__ThrottleDefinitions   *message,
                      uint8_t             *out);
size_t proto__throttle_definitions__pack_to_buffer
                     (const Proto__ThrottleDefinitions   *message,
                      ProtobufCBuffer     *buffer);
Proto__ThrottleDefinitions *
       proto__throttle_definitions__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__throttle_definitions__free_unpacked
                     (Proto__ThrottleDefinitions *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__ThrottleGroup_Closure)
                 (const Proto__ThrottleGroup *message,
                  void *closure_data);
typedef void (*Proto__ThrottleBucket_Closure)
                 (const Proto__ThrottleBucket *message,
                  void *closure_data);
typedef void (*Proto__ThrottleDefinitions_Closure)
                 (const Proto__ThrottleDefinitions *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__throttle_group__descriptor;
extern const ProtobufCMessageDescriptor proto__throttle_bucket__descriptor;
extern const ProtobufCMessageDescriptor proto__throttle_definitions__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ThrottleDefinitions_2eproto__INCLUDED */
