/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ContractGetInfo.proto */

#ifndef PROTOBUF_C_ContractGetInfo_2eproto__INCLUDED
#define PROTOBUF_C_ContractGetInfo_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "Timestamp.pb-c.h"
#include "Duration.pb-c.h"
#include "BasicTypes.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"

typedef struct Proto__ContractGetInfoQuery Proto__ContractGetInfoQuery;
typedef struct Proto__ContractGetInfoResponse Proto__ContractGetInfoResponse;
typedef struct Proto__ContractGetInfoResponse__ContractInfo Proto__ContractGetInfoResponse__ContractInfo;


/* --- enums --- */


/* --- messages --- */

/*
 * Get information about a smart contract instance. This includes the account that it uses, the file containing its bytecode, and the time when it will expire. 
 */
struct  Proto__ContractGetInfoQuery
{
  ProtobufCMessage base;
  /*
   * standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
   */
  Proto__QueryHeader *header;
  /*
   * the contract for which information is requested
   */
  Proto__ContractID *contractid;
};
#define PROTO__CONTRACT_GET_INFO_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__contract_get_info_query__descriptor) \
    , NULL, NULL }


struct  Proto__ContractGetInfoResponse__ContractInfo
{
  ProtobufCMessage base;
  /*
   * ID of the contract instance, in the format used in transactions
   */
  Proto__ContractID *contractid;
  /*
   * ID of the cryptocurrency account owned by the contract instance, in the format used in transactions
   */
  Proto__AccountID *accountid;
  /*
   * ID of both the contract instance and the cryptocurrency account owned by the contract instance, in the format used by Solidity
   */
  char *contractaccountid;
  /*
   * the state of the instance and its fields can be modified arbitrarily if this key signs a transaction to modify it. If this is null, then such modifications are not possible, and there is no administrator that can override the normal operation of this smart contract instance. Note that if it is created with no admin keys, then there is no administrator to authorize changing the admin keys, so there can never be any admin keys for that instance. * 
   */
  Proto__Key *adminkey;
  /*
   * the current time at which this contract instance (and its account) is set to expire
   */
  Proto__Timestamp *expirationtime;
  /*
   * the expiration time will extend every this many seconds. If there are insufficient funds, then it extends as long as possible. If the account is empty when it expires, then it is deleted.
   */
  Proto__Duration *autorenewperiod;
  /*
   * number of bytes of storage being used by this instance (which affects the cost to extend the expiration time)
   */
  int64_t storage;
  /*
   * the memo associated with the contract (max 100 bytes)
   */
  char *memo;
  /*
   * The current balance, in tinybars
   */
  uint64_t balance;
  /*
   * Whether the contract has been deleted
   */
  protobuf_c_boolean deleted;
  /*
   * The tokens associated to the contract
   */
  size_t n_tokenrelationships;
  Proto__TokenRelationship **tokenrelationships;
};
#define PROTO__CONTRACT_GET_INFO_RESPONSE__CONTRACT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__contract_get_info_response__contract_info__descriptor) \
    , NULL, NULL, (char *)protobuf_c_empty_string, NULL, NULL, NULL, 0, (char *)protobuf_c_empty_string, 0, 0, 0,NULL }


/*
 * Response when the client sends the node ContractGetInfoQuery 
 */
struct  Proto__ContractGetInfoResponse
{
  ProtobufCMessage base;
  /*
   *standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
   */
  Proto__ResponseHeader *header;
  /*
   * the information about this contract instance (a state proof can be generated for this)
   */
  Proto__ContractGetInfoResponse__ContractInfo *contractinfo;
};
#define PROTO__CONTRACT_GET_INFO_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__contract_get_info_response__descriptor) \
    , NULL, NULL }


/* Proto__ContractGetInfoQuery methods */
void   proto__contract_get_info_query__init
                     (Proto__ContractGetInfoQuery         *message);
size_t proto__contract_get_info_query__get_packed_size
                     (const Proto__ContractGetInfoQuery   *message);
size_t proto__contract_get_info_query__pack
                     (const Proto__ContractGetInfoQuery   *message,
                      uint8_t             *out);
size_t proto__contract_get_info_query__pack_to_buffer
                     (const Proto__ContractGetInfoQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__ContractGetInfoQuery *
       proto__contract_get_info_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__contract_get_info_query__free_unpacked
                     (Proto__ContractGetInfoQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__ContractGetInfoResponse__ContractInfo methods */
void   proto__contract_get_info_response__contract_info__init
                     (Proto__ContractGetInfoResponse__ContractInfo         *message);
/* Proto__ContractGetInfoResponse methods */
void   proto__contract_get_info_response__init
                     (Proto__ContractGetInfoResponse         *message);
size_t proto__contract_get_info_response__get_packed_size
                     (const Proto__ContractGetInfoResponse   *message);
size_t proto__contract_get_info_response__pack
                     (const Proto__ContractGetInfoResponse   *message,
                      uint8_t             *out);
size_t proto__contract_get_info_response__pack_to_buffer
                     (const Proto__ContractGetInfoResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__ContractGetInfoResponse *
       proto__contract_get_info_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__contract_get_info_response__free_unpacked
                     (Proto__ContractGetInfoResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__ContractGetInfoQuery_Closure)
                 (const Proto__ContractGetInfoQuery *message,
                  void *closure_data);
typedef void (*Proto__ContractGetInfoResponse__ContractInfo_Closure)
                 (const Proto__ContractGetInfoResponse__ContractInfo *message,
                  void *closure_data);
typedef void (*Proto__ContractGetInfoResponse_Closure)
                 (const Proto__ContractGetInfoResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__contract_get_info_query__descriptor;
extern const ProtobufCMessageDescriptor proto__contract_get_info_response__descriptor;
extern const ProtobufCMessageDescriptor proto__contract_get_info_response__contract_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ContractGetInfo_2eproto__INCLUDED */
