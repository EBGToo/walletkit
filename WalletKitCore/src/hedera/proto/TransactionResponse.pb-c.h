/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TransactionResponse.proto */

#ifndef PROTOBUF_C_TransactionResponse_2eproto__INCLUDED
#define PROTOBUF_C_TransactionResponse_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ResponseCode.pb-c.h"

typedef struct Proto__TransactionResponse Proto__TransactionResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * When the client sends the node a transaction of any kind, the node replies with this, which simply says that the transaction passed the precheck (so the node will submit it to the network) or it failed (so it won't). If the fee offered was insufficient, this will also contain the amount of the required fee. To learn the consensus result, the client should later obtain a receipt (free), or can buy a more detailed record (not free). 
 */
struct  Proto__TransactionResponse
{
  ProtobufCMessage base;
  /*
   * The response code that indicates the current status of the transaction.
   */
  Proto__ResponseCodeEnum nodetransactionprecheckcode;
  /*
   * If the response code was INSUFFICIENT_TX_FEE, the actual transaction fee that would be required to execute the transaction.
   */
  uint64_t cost;
};
#define PROTO__TRANSACTION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__transaction_response__descriptor) \
    , PROTO__RESPONSE_CODE_ENUM__OK, 0 }


/* Proto__TransactionResponse methods */
void   proto__transaction_response__init
                     (Proto__TransactionResponse         *message);
size_t proto__transaction_response__get_packed_size
                     (const Proto__TransactionResponse   *message);
size_t proto__transaction_response__pack
                     (const Proto__TransactionResponse   *message,
                      uint8_t             *out);
size_t proto__transaction_response__pack_to_buffer
                     (const Proto__TransactionResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__TransactionResponse *
       proto__transaction_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__transaction_response__free_unpacked
                     (Proto__TransactionResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__TransactionResponse_Closure)
                 (const Proto__TransactionResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__transaction_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TransactionResponse_2eproto__INCLUDED */
