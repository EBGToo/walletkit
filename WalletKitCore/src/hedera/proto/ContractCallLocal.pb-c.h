/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ContractCallLocal.proto */

#ifndef PROTOBUF_C_ContractCallLocal_2eproto__INCLUDED
#define PROTOBUF_C_ContractCallLocal_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"

typedef struct Proto__ContractLoginfo Proto__ContractLoginfo;
typedef struct Proto__ContractFunctionResult Proto__ContractFunctionResult;
typedef struct Proto__ContractCallLocalQuery Proto__ContractCallLocalQuery;
typedef struct Proto__ContractCallLocalResponse Proto__ContractCallLocalResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * The log information for an event returned by a smart contract function call. One function call may return several such events. 
 */
struct  Proto__ContractLoginfo
{
  ProtobufCMessage base;
  /*
   * address of a contract that emitted the event
   */
  Proto__ContractID *contractid;
  /*
   * bloom filter for a particular log
   */
  ProtobufCBinaryData bloom;
  /*
   * topics of a particular event
   */
  size_t n_topic;
  ProtobufCBinaryData *topic;
  /*
   * event data
   */
  ProtobufCBinaryData data;
};
#define PROTO__CONTRACT_LOGINFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__contract_loginfo__descriptor) \
    , NULL, {0,NULL}, 0,NULL, {0,NULL} }


/*
 * The result returned by a call to a smart contract function. This is part of the response to a ContractCallLocal query, and is in the record for a ContractCall or ContractCreateInstance transaction. The ContractCreateInstance transaction record has the results of the call to the constructor. 
 */
struct  Proto__ContractFunctionResult
{
  ProtobufCMessage base;
  /*
   * the smart contract instance whose function was called
   */
  Proto__ContractID *contractid;
  /*
   * the result returned by the function
   */
  ProtobufCBinaryData contractcallresult;
  /*
   * message In case there was an error during smart contract execution
   */
  char *errormessage;
  /*
   * bloom filter for record
   */
  ProtobufCBinaryData bloom;
  /*
   * units of gas used to execute contract
   */
  uint64_t gasused;
  /*
   * the log info for events returned by the function
   */
  size_t n_loginfo;
  Proto__ContractLoginfo **loginfo;
  /*
   * the list of smart contracts that were created by the function call
   */
  size_t n_createdcontractids;
  Proto__ContractID **createdcontractids;
};
#define PROTO__CONTRACT_FUNCTION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__contract_function_result__descriptor) \
    , NULL, {0,NULL}, (char *)protobuf_c_empty_string, {0,NULL}, 0, 0,NULL, 0,NULL }


/*
 *Call a function of the given smart contract instance, giving it functionParameters as its inputs.
 *This is performed locally on the particular node that the client is communicating with.
 *It cannot change the state of the contract instance (and so, cannot spend anything from the instance's cryptocurrency account).
 *It will not have a consensus timestamp. It cannot generate a record or a receipt. The response will contain the output
 *returned by the function call.  This is useful for calling getter functions, which purely read the state and don't change it.
 *It is faster and cheaper than a normal call, because it is purely local to a single  node.
 *Unlike a ContractCall transaction, the node will consume the entire amount of provided gas in determining
 *the fee for this query.
 */
struct  Proto__ContractCallLocalQuery
{
  ProtobufCMessage base;
  /*
   * standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither). The payment must cover the fees and all of the gas offered.
   */
  Proto__QueryHeader *header;
  /*
   * the contract instance to call, in the format used in transactions
   */
  Proto__ContractID *contractid;
  /*
   * The amount of gas to use for the call; all of the gas offered will be used and charged a corresponding fee
   */
  int64_t gas;
  /*
   * which function to call, and the parameters to pass to the function
   */
  ProtobufCBinaryData functionparameters;
  /*
   * max number of bytes that the result might include. The run will fail if it would have returned more than this number of bytes.
   */
  int64_t maxresultsize;
};
#define PROTO__CONTRACT_CALL_LOCAL_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__contract_call_local_query__descriptor) \
    , NULL, NULL, 0, {0,NULL}, 0 }


/*
 * Response when the client sends the node ContractCallLocalQuery 
 */
struct  Proto__ContractCallLocalResponse
{
  ProtobufCMessage base;
  /*
   *standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
   */
  Proto__ResponseHeader *header;
  /*
   * the value returned by the function (if it completed and didn't fail)
   */
  Proto__ContractFunctionResult *functionresult;
};
#define PROTO__CONTRACT_CALL_LOCAL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__contract_call_local_response__descriptor) \
    , NULL, NULL }


/* Proto__ContractLoginfo methods */
void   proto__contract_loginfo__init
                     (Proto__ContractLoginfo         *message);
size_t proto__contract_loginfo__get_packed_size
                     (const Proto__ContractLoginfo   *message);
size_t proto__contract_loginfo__pack
                     (const Proto__ContractLoginfo   *message,
                      uint8_t             *out);
size_t proto__contract_loginfo__pack_to_buffer
                     (const Proto__ContractLoginfo   *message,
                      ProtobufCBuffer     *buffer);
Proto__ContractLoginfo *
       proto__contract_loginfo__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__contract_loginfo__free_unpacked
                     (Proto__ContractLoginfo *message,
                      ProtobufCAllocator *allocator);
/* Proto__ContractFunctionResult methods */
void   proto__contract_function_result__init
                     (Proto__ContractFunctionResult         *message);
size_t proto__contract_function_result__get_packed_size
                     (const Proto__ContractFunctionResult   *message);
size_t proto__contract_function_result__pack
                     (const Proto__ContractFunctionResult   *message,
                      uint8_t             *out);
size_t proto__contract_function_result__pack_to_buffer
                     (const Proto__ContractFunctionResult   *message,
                      ProtobufCBuffer     *buffer);
Proto__ContractFunctionResult *
       proto__contract_function_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__contract_function_result__free_unpacked
                     (Proto__ContractFunctionResult *message,
                      ProtobufCAllocator *allocator);
/* Proto__ContractCallLocalQuery methods */
void   proto__contract_call_local_query__init
                     (Proto__ContractCallLocalQuery         *message);
size_t proto__contract_call_local_query__get_packed_size
                     (const Proto__ContractCallLocalQuery   *message);
size_t proto__contract_call_local_query__pack
                     (const Proto__ContractCallLocalQuery   *message,
                      uint8_t             *out);
size_t proto__contract_call_local_query__pack_to_buffer
                     (const Proto__ContractCallLocalQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__ContractCallLocalQuery *
       proto__contract_call_local_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__contract_call_local_query__free_unpacked
                     (Proto__ContractCallLocalQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__ContractCallLocalResponse methods */
void   proto__contract_call_local_response__init
                     (Proto__ContractCallLocalResponse         *message);
size_t proto__contract_call_local_response__get_packed_size
                     (const Proto__ContractCallLocalResponse   *message);
size_t proto__contract_call_local_response__pack
                     (const Proto__ContractCallLocalResponse   *message,
                      uint8_t             *out);
size_t proto__contract_call_local_response__pack_to_buffer
                     (const Proto__ContractCallLocalResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__ContractCallLocalResponse *
       proto__contract_call_local_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__contract_call_local_response__free_unpacked
                     (Proto__ContractCallLocalResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__ContractLoginfo_Closure)
                 (const Proto__ContractLoginfo *message,
                  void *closure_data);
typedef void (*Proto__ContractFunctionResult_Closure)
                 (const Proto__ContractFunctionResult *message,
                  void *closure_data);
typedef void (*Proto__ContractCallLocalQuery_Closure)
                 (const Proto__ContractCallLocalQuery *message,
                  void *closure_data);
typedef void (*Proto__ContractCallLocalResponse_Closure)
                 (const Proto__ContractCallLocalResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__contract_loginfo__descriptor;
extern const ProtobufCMessageDescriptor proto__contract_function_result__descriptor;
extern const ProtobufCMessageDescriptor proto__contract_call_local_query__descriptor;
extern const ProtobufCMessageDescriptor proto__contract_call_local_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ContractCallLocal_2eproto__INCLUDED */
