/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TransactionBody.proto */

#ifndef PROTOBUF_C_TransactionBody_2eproto__INCLUDED
#define PROTOBUF_C_TransactionBody_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "SystemDelete.pb-c.h"
#include "SystemUndelete.pb-c.h"
#include "Freeze.pb-c.h"
#include "ContractCall.pb-c.h"
#include "ContractCreate.pb-c.h"
#include "ContractUpdate.pb-c.h"
#include "CryptoAddLiveHash.pb-c.h"
#include "CryptoCreate.pb-c.h"
#include "CryptoDelete.pb-c.h"
#include "CryptoDeleteLiveHash.pb-c.h"
#include "CryptoTransfer.pb-c.h"
#include "CryptoUpdate.pb-c.h"
#include "FileAppend.pb-c.h"
#include "FileCreate.pb-c.h"
#include "FileDelete.pb-c.h"
#include "FileUpdate.pb-c.h"
#include "Duration.pb-c.h"
#include "BasicTypes.pb-c.h"
#include "ContractDelete.pb-c.h"
#include "ConsensusCreateTopic.pb-c.h"
#include "ConsensusUpdateTopic.pb-c.h"
#include "ConsensusDeleteTopic.pb-c.h"
#include "ConsensusSubmitMessage.pb-c.h"
#include "UncheckedSubmit.pb-c.h"
#include "TokenCreate.pb-c.h"
#include "TokenFreezeAccount.pb-c.h"
#include "TokenUnfreezeAccount.pb-c.h"
#include "TokenGrantKyc.pb-c.h"
#include "TokenRevokeKyc.pb-c.h"
#include "TokenDelete.pb-c.h"
#include "TokenUpdate.pb-c.h"
#include "TokenMint.pb-c.h"
#include "TokenBurn.pb-c.h"
#include "TokenWipeAccount.pb-c.h"
#include "TokenAssociate.pb-c.h"
#include "TokenDissociate.pb-c.h"
#include "TokenFeeScheduleUpdate.pb-c.h"
#include "ScheduleCreate.pb-c.h"
#include "ScheduleDelete.pb-c.h"
#include "ScheduleSign.pb-c.h"

typedef struct Proto__TransactionBody Proto__TransactionBody;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  PROTO__TRANSACTION_BODY__DATA__NOT_SET = 0,
  PROTO__TRANSACTION_BODY__DATA_CONTRACT_CALL = 7,
  PROTO__TRANSACTION_BODY__DATA_CONTRACT_CREATE_INSTANCE = 8,
  PROTO__TRANSACTION_BODY__DATA_CONTRACT_UPDATE_INSTANCE = 9,
  PROTO__TRANSACTION_BODY__DATA_CONTRACT_DELETE_INSTANCE = 22,
  PROTO__TRANSACTION_BODY__DATA_CRYPTO_ADD_LIVE_HASH = 10,
  PROTO__TRANSACTION_BODY__DATA_CRYPTO_CREATE_ACCOUNT = 11,
  PROTO__TRANSACTION_BODY__DATA_CRYPTO_DELETE = 12,
  PROTO__TRANSACTION_BODY__DATA_CRYPTO_DELETE_LIVE_HASH = 13,
  PROTO__TRANSACTION_BODY__DATA_CRYPTO_TRANSFER = 14,
  PROTO__TRANSACTION_BODY__DATA_CRYPTO_UPDATE_ACCOUNT = 15,
  PROTO__TRANSACTION_BODY__DATA_FILE_APPEND = 16,
  PROTO__TRANSACTION_BODY__DATA_FILE_CREATE = 17,
  PROTO__TRANSACTION_BODY__DATA_FILE_DELETE = 18,
  PROTO__TRANSACTION_BODY__DATA_FILE_UPDATE = 19,
  PROTO__TRANSACTION_BODY__DATA_SYSTEM_DELETE = 20,
  PROTO__TRANSACTION_BODY__DATA_SYSTEM_UNDELETE = 21,
  PROTO__TRANSACTION_BODY__DATA_FREEZE = 23,
  PROTO__TRANSACTION_BODY__DATA_CONSENSUS_CREATE_TOPIC = 24,
  PROTO__TRANSACTION_BODY__DATA_CONSENSUS_UPDATE_TOPIC = 25,
  PROTO__TRANSACTION_BODY__DATA_CONSENSUS_DELETE_TOPIC = 26,
  PROTO__TRANSACTION_BODY__DATA_CONSENSUS_SUBMIT_MESSAGE = 27,
  PROTO__TRANSACTION_BODY__DATA_UNCHECKED_SUBMIT = 28,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_CREATION = 29,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_FREEZE = 31,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_UNFREEZE = 32,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_GRANT_KYC = 33,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_REVOKE_KYC = 34,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_DELETION = 35,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_UPDATE = 36,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_MINT = 37,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_BURN = 38,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_WIPE = 39,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_ASSOCIATE = 40,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_DISSOCIATE = 41,
  PROTO__TRANSACTION_BODY__DATA_TOKEN_FEE_SCHEDULE_UPDATE = 45,
  PROTO__TRANSACTION_BODY__DATA_SCHEDULE_CREATE = 42,
  PROTO__TRANSACTION_BODY__DATA_SCHEDULE_DELETE = 43,
  PROTO__TRANSACTION_BODY__DATA_SCHEDULE_SIGN = 44
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__TRANSACTION_BODY__DATA__CASE)
} Proto__TransactionBody__DataCase;

/*
 * A single transaction. All transaction types are possible here. 
 */
struct  Proto__TransactionBody
{
  ProtobufCMessage base;
  /*
   * The ID for this transaction, which includes the payer's account (the account paying the transaction fee). If two transactions have the same transactionID, they won't both have an effect
   */
  Proto__TransactionID *transactionid;
  /*
   * The account of the node that submits the client's transaction to the network
   */
  Proto__AccountID *nodeaccountid;
  /*
   * The maximum transaction fee the client is willing to pay
   */
  uint64_t transactionfee;
  /*
   *The transaction is invalid if consensusTimestamp > transactionID.transactionValidStart + transactionValidDuration
   */
  Proto__Duration *transactionvalidduration;
  /*
   * Should a record of this transaction be generated? (A receipt is always generated, but the record is optional)
   */
  protobuf_c_boolean generaterecord PROTOBUF_C__DEPRECATED;
  /*
   * Any notes or descriptions that should be put into the record (max length 100)
   */
  char *memo;
  Proto__TransactionBody__DataCase data_case;
  union {
    /*
     * Calls a function of a contract instance
     */
    Proto__ContractCallTransactionBody *contractcall;
    /*
     * Creates a contract instance
     */
    Proto__ContractCreateTransactionBody *contractcreateinstance;
    /*
     * Updates a contract
     */
    Proto__ContractUpdateTransactionBody *contractupdateinstance;
    /*
     *Delete contract and transfer remaining balance into specified account
     */
    Proto__ContractDeleteTransactionBody *contractdeleteinstance;
    /*
     * Attach a new livehash to an account
     */
    Proto__CryptoAddLiveHashTransactionBody *cryptoaddlivehash;
    /*
     * Create a new cryptocurrency account
     */
    Proto__CryptoCreateTransactionBody *cryptocreateaccount;
    /*
     * Delete a cryptocurrency account (mark as deleted, and transfer hbars out)
     */
    Proto__CryptoDeleteTransactionBody *cryptodelete;
    /*
     * Remove a livehash from an account
     */
    Proto__CryptoDeleteLiveHashTransactionBody *cryptodeletelivehash;
    /*
     * Transfer amount between accounts
     */
    Proto__CryptoTransferTransactionBody *cryptotransfer;
    /*
     * Modify information such as the expiration date for an account
     */
    Proto__CryptoUpdateTransactionBody *cryptoupdateaccount;
    /*
     * Add bytes to the end of the contents of a file
     */
    Proto__FileAppendTransactionBody *fileappend;
    /*
     * Create a new file
     */
    Proto__FileCreateTransactionBody *filecreate;
    /*
     * Delete a file (remove contents and mark as deleted until it expires)
     */
    Proto__FileDeleteTransactionBody *filedelete;
    /*
     * Modify information such as the expiration date for a file
     */
    Proto__FileUpdateTransactionBody *fileupdate;
    /*
     * Hedera administrative deletion of a file or smart contract
     */
    Proto__SystemDeleteTransactionBody *systemdelete;
    /*
     *To undelete an entity deleted by SystemDelete
     */
    Proto__SystemUndeleteTransactionBody *systemundelete;
    /*
     * Freeze the nodes
     */
    Proto__FreezeTransactionBody *freeze;
    /*
     * Creates a topic
     */
    Proto__ConsensusCreateTopicTransactionBody *consensuscreatetopic;
    /*
     * Updates a topic
     */
    Proto__ConsensusUpdateTopicTransactionBody *consensusupdatetopic;
    /*
     * Deletes a topic
     */
    Proto__ConsensusDeleteTopicTransactionBody *consensusdeletetopic;
    /*
     * Submits message to a topic
     */
    Proto__ConsensusSubmitMessageTransactionBody *consensussubmitmessage;
    Proto__UncheckedSubmitBody *uncheckedsubmit;
    /*
     * Creates a token instance
     */
    Proto__TokenCreateTransactionBody *tokencreation;
    /*
     * Freezes account not to be able to transact with a token
     */
    Proto__TokenFreezeAccountTransactionBody *tokenfreeze;
    /*
     * Unfreezes account for a token
     */
    Proto__TokenUnfreezeAccountTransactionBody *tokenunfreeze;
    /*
     * Grants KYC to an account for a token
     */
    Proto__TokenGrantKycTransactionBody *tokengrantkyc;
    /*
     * Revokes KYC of an account for a token
     */
    Proto__TokenRevokeKycTransactionBody *tokenrevokekyc;
    /*
     * Deletes a token instance
     */
    Proto__TokenDeleteTransactionBody *tokendeletion;
    /*
     * Updates a token instance
     */
    Proto__TokenUpdateTransactionBody *tokenupdate;
    /*
     * Mints new tokens to a token's treasury account
     */
    Proto__TokenMintTransactionBody *tokenmint;
    /*
     * Burns tokens from a token's treasury account
     */
    Proto__TokenBurnTransactionBody *tokenburn;
    /*
     * Wipes amount of tokens from an account
     */
    Proto__TokenWipeAccountTransactionBody *tokenwipe;
    /*
     * Associate tokens to an account
     */
    Proto__TokenAssociateTransactionBody *tokenassociate;
    /*
     * Dissociate tokens from an account
     */
    Proto__TokenDissociateTransactionBody *tokendissociate;
    /*
     * Updates a token's custom fee schedule
     */
    Proto__TokenFeeScheduleUpdateTransactionBody *token_fee_schedule_update;
    /*
     * Creates a schedule in the network's action queue
     */
    Proto__ScheduleCreateTransactionBody *schedulecreate;
    /*
     * Deletes a schedule from the network's action queue
     */
    Proto__ScheduleDeleteTransactionBody *scheduledelete;
    /*
     * Adds one or more Ed25519 keys to the affirmed signers of a scheduled transaction
     */
    Proto__ScheduleSignTransactionBody *schedulesign;
  };
};
#define PROTO__TRANSACTION_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__transaction_body__descriptor) \
    , NULL, NULL, 0, NULL, 0, (char *)protobuf_c_empty_string, PROTO__TRANSACTION_BODY__DATA__NOT_SET, {0} }


/* Proto__TransactionBody methods */
void   proto__transaction_body__init
                     (Proto__TransactionBody         *message);
size_t proto__transaction_body__get_packed_size
                     (const Proto__TransactionBody   *message);
size_t proto__transaction_body__pack
                     (const Proto__TransactionBody   *message,
                      uint8_t             *out);
size_t proto__transaction_body__pack_to_buffer
                     (const Proto__TransactionBody   *message,
                      ProtobufCBuffer     *buffer);
Proto__TransactionBody *
       proto__transaction_body__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__transaction_body__free_unpacked
                     (Proto__TransactionBody *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__TransactionBody_Closure)
                 (const Proto__TransactionBody *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__transaction_body__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TransactionBody_2eproto__INCLUDED */
