/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TransactionRecord.proto */

#ifndef PROTOBUF_C_TransactionRecord_2eproto__INCLUDED
#define PROTOBUF_C_TransactionRecord_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "Timestamp.pb-c.h"
#include "BasicTypes.pb-c.h"
#include "CustomFees.pb-c.h"
#include "TransactionReceipt.pb-c.h"
#include "CryptoTransfer.pb-c.h"
#include "ContractCallLocal.pb-c.h"

typedef struct Proto__TransactionRecord Proto__TransactionRecord;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  PROTO__TRANSACTION_RECORD__BODY__NOT_SET = 0,
  PROTO__TRANSACTION_RECORD__BODY_CONTRACT_CALL_RESULT = 7,
  PROTO__TRANSACTION_RECORD__BODY_CONTRACT_CREATE_RESULT = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__TRANSACTION_RECORD__BODY__CASE)
} Proto__TransactionRecord__BodyCase;

/*
 * Response when the client sends the node TransactionGetRecordResponse 
 */
struct  Proto__TransactionRecord
{
  ProtobufCMessage base;
  /*
   * The status (reach consensus, or failed, or is unknown) and the ID of any new account/file/instance created.
   */
  Proto__TransactionReceipt *receipt;
  /*
   * The hash of the Transaction that executed (not the hash of any Transaction that failed for having a duplicate TransactionID)
   */
  ProtobufCBinaryData transactionhash;
  /*
   * The consensus timestamp (or null if didn't reach consensus yet)
   */
  Proto__Timestamp *consensustimestamp;
  /*
   * The ID of the transaction this record represents
   */
  Proto__TransactionID *transactionid;
  /*
   * The memo that was submitted as part of the transaction (max 100 bytes)
   */
  char *memo;
  /*
   * The actual transaction fee charged, not the original transactionFee value from TransactionBody
   */
  uint64_t transactionfee;
  /*
   * All hbar transfers as a result of this transaction, such as fees, or transfers performed by the transaction, or by a smart contract it calls, or by the creation of threshold records that it triggers.
   */
  Proto__TransferList *transferlist;
  /*
   * All Token transfers as a result of this transaction
   */
  size_t n_tokentransferlists;
  Proto__TokenTransferList **tokentransferlists;
  /*
   * Reference to the scheduled transaction ID that this transaction record represent
   */
  Proto__ScheduleID *scheduleref;
  /*
   * All custom fees that were assessed during a CryptoTransfer, and must be paid if the transaction status resolved to SUCCESS
   */
  size_t n_assessed_custom_fees;
  Proto__AssessedCustomFee **assessed_custom_fees;
  Proto__TransactionRecord__BodyCase body_case;
  union {
    /*
     * Record of the value returned by the smart contract function (if it completed and didn't fail) from ContractCallTransaction
     */
    Proto__ContractFunctionResult *contractcallresult;
    /*
     * Record of the value returned by the smart contract constructor (if it completed and didn't fail) from ContractCreateTransaction
     */
    Proto__ContractFunctionResult *contractcreateresult;
  };
};
#define PROTO__TRANSACTION_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__transaction_record__descriptor) \
    , NULL, {0,NULL}, NULL, NULL, (char *)protobuf_c_empty_string, 0, NULL, 0,NULL, NULL, 0,NULL, PROTO__TRANSACTION_RECORD__BODY__NOT_SET, {0} }


/* Proto__TransactionRecord methods */
void   proto__transaction_record__init
                     (Proto__TransactionRecord         *message);
size_t proto__transaction_record__get_packed_size
                     (const Proto__TransactionRecord   *message);
size_t proto__transaction_record__pack
                     (const Proto__TransactionRecord   *message,
                      uint8_t             *out);
size_t proto__transaction_record__pack_to_buffer
                     (const Proto__TransactionRecord   *message,
                      ProtobufCBuffer     *buffer);
Proto__TransactionRecord *
       proto__transaction_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__transaction_record__free_unpacked
                     (Proto__TransactionRecord *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__TransactionRecord_Closure)
                 (const Proto__TransactionRecord *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__transaction_record__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TransactionRecord_2eproto__INCLUDED */
