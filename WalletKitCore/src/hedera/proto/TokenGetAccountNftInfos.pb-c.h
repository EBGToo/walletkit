/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TokenGetAccountNftInfos.proto */

#ifndef PROTOBUF_C_TokenGetAccountNftInfos_2eproto__INCLUDED
#define PROTOBUF_C_TokenGetAccountNftInfos_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "TokenGetNftInfo.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"

typedef struct Proto__TokenGetAccountNftInfosQuery Proto__TokenGetAccountNftInfosQuery;
typedef struct Proto__TokenGetAccountNftInfosResponse Proto__TokenGetAccountNftInfosResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Applicable only to tokens of type NON_FUNGIBLE_UNIQUE. Gets info on NFTs N through M owned by the specified accountId.
 * Example: If Account A owns 5 NFTs (might be of different Token Entity), having start=0 and end=5 will return all of the NFTs
 * INVALID_QUERY_RANGE response code will be returned if:
 * 1) Start > End
 * 2) Start and End indices are non-positive
 * 3) Start and End indices are out of boundaries for the retrieved nft list
 * 4) The range between Start and End is bigger than the global dynamic property for maximum query range
 * NOT_SUPPORTED response code will be returned if the queried token is of type FUNGIBLE_COMMON
 * INVALID_ACCOUNT_ID response code will be returned if the queried account does not exist
 * ACCOUNT_DELETED response code will be returned if the queried account has been deleted
 */
struct  Proto__TokenGetAccountNftInfosQuery
{
  ProtobufCMessage base;
  /*
   * Standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
   */
  Proto__QueryHeader *header;
  /*
   * The Account for which information is requested
   */
  Proto__AccountID *accountid;
  /*
   * Specifies the start index (inclusive) of the range of NFTs to query for. Value must be in the range [0; ownedNFTs-1]
   */
  int64_t start;
  /*
   * Specifies the end index (exclusive) of the range of NFTs to query for. Value must be in the range (start; ownedNFTs]
   */
  int64_t end;
};
#define PROTO__TOKEN_GET_ACCOUNT_NFT_INFOS_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__token_get_account_nft_infos_query__descriptor) \
    , NULL, NULL, 0, 0 }


struct  Proto__TokenGetAccountNftInfosResponse
{
  ProtobufCMessage base;
  /*
   * Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
   */
  Proto__ResponseHeader *header;
  /*
   * List of NFTs associated to the account
   */
  size_t n_nfts;
  Proto__TokenNftInfo **nfts;
};
#define PROTO__TOKEN_GET_ACCOUNT_NFT_INFOS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__token_get_account_nft_infos_response__descriptor) \
    , NULL, 0,NULL }


/* Proto__TokenGetAccountNftInfosQuery methods */
void   proto__token_get_account_nft_infos_query__init
                     (Proto__TokenGetAccountNftInfosQuery         *message);
size_t proto__token_get_account_nft_infos_query__get_packed_size
                     (const Proto__TokenGetAccountNftInfosQuery   *message);
size_t proto__token_get_account_nft_infos_query__pack
                     (const Proto__TokenGetAccountNftInfosQuery   *message,
                      uint8_t             *out);
size_t proto__token_get_account_nft_infos_query__pack_to_buffer
                     (const Proto__TokenGetAccountNftInfosQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__TokenGetAccountNftInfosQuery *
       proto__token_get_account_nft_infos_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__token_get_account_nft_infos_query__free_unpacked
                     (Proto__TokenGetAccountNftInfosQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__TokenGetAccountNftInfosResponse methods */
void   proto__token_get_account_nft_infos_response__init
                     (Proto__TokenGetAccountNftInfosResponse         *message);
size_t proto__token_get_account_nft_infos_response__get_packed_size
                     (const Proto__TokenGetAccountNftInfosResponse   *message);
size_t proto__token_get_account_nft_infos_response__pack
                     (const Proto__TokenGetAccountNftInfosResponse   *message,
                      uint8_t             *out);
size_t proto__token_get_account_nft_infos_response__pack_to_buffer
                     (const Proto__TokenGetAccountNftInfosResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__TokenGetAccountNftInfosResponse *
       proto__token_get_account_nft_infos_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__token_get_account_nft_infos_response__free_unpacked
                     (Proto__TokenGetAccountNftInfosResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__TokenGetAccountNftInfosQuery_Closure)
                 (const Proto__TokenGetAccountNftInfosQuery *message,
                  void *closure_data);
typedef void (*Proto__TokenGetAccountNftInfosResponse_Closure)
                 (const Proto__TokenGetAccountNftInfosResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__token_get_account_nft_infos_query__descriptor;
extern const ProtobufCMessageDescriptor proto__token_get_account_nft_infos_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TokenGetAccountNftInfos_2eproto__INCLUDED */
