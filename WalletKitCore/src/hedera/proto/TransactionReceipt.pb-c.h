/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TransactionReceipt.proto */

#ifndef PROTOBUF_C_TransactionReceipt_2eproto__INCLUDED
#define PROTOBUF_C_TransactionReceipt_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "ResponseCode.pb-c.h"
#include "ExchangeRate.pb-c.h"

typedef struct Proto__TransactionReceipt Proto__TransactionReceipt;


/* --- enums --- */


/* --- messages --- */

/*
 *The summary of a transaction's result so far. If the transaction has not reached consensus, this result will be necessarily incomplete.
 */
struct  Proto__TransactionReceipt
{
  ProtobufCMessage base;
  /*
   * The consensus status of the transaction; is UNKNOWN if consensus has not been reached, or if the
   * associated transaction did not have a valid payer signature
   */
  Proto__ResponseCodeEnum status;
  /*
   * In the receipt of a CryptoCreate, the id of the newly created account
   */
  Proto__AccountID *accountid;
  /*
   * In the receipt of a FileCreate, the id of the newly created file
   */
  Proto__FileID *fileid;
  /*
   * In the receipt of a ContractCreate, the id of the newly created contract
   */
  Proto__ContractID *contractid;
  /*
   * The exchange rates in effect when the transaction reached consensus
   */
  Proto__ExchangeRateSet *exchangerate;
  /*
   * In the receipt of a ConsensusCreateTopic, the id of the newly created topic.
   */
  Proto__TopicID *topicid;
  /*
   * In the receipt of a ConsensusSubmitMessage, the new sequence number of the topic that received the message
   */
  uint64_t topicsequencenumber;
  /*
   * In the receipt of a ConsensusSubmitMessage, the new running hash of the topic that received the message.
   * This 48-byte field is the output of a particular SHA-384 digest whose input data are determined by the
   * value of the topicRunningHashVersion below. The bytes of each uint64 or uint32 are to be in Big-Endian
   * format.
   * IF the topicRunningHashVersion is '0' or '1', then the input data to the SHA-384 digest are, in order:
   * ---
   * 1. The previous running hash of the topic (48 bytes)
   * 2. The topic's shard (8 bytes)
   * 3. The topic's realm (8 bytes)
   * 4. The topic's number (8 bytes)
   * 5. The number of seconds since the epoch before the ConsensusSubmitMessage reached consensus (8 bytes)
   * 6. The number of nanoseconds since 5. before the ConsensusSubmitMessage reached consensus (4 bytes)
   * 7. The topicSequenceNumber from above (8 bytes)
   * 8. The message bytes from the ConsensusSubmitMessage (variable).
   * IF the topicRunningHashVersion is '2', then the input data to the SHA-384 digest are, in order:
   * ---
   * 1. The previous running hash of the topic (48 bytes)
   * 2. The topicRunningHashVersion below (8 bytes)
   * 3. The topic's shard (8 bytes)
   * 4. The topic's realm (8 bytes)
   * 5. The topic's number (8 bytes)
   * 6. The number of seconds since the epoch before the ConsensusSubmitMessage reached consensus (8 bytes)
   * 7. The number of nanoseconds since 6. before the ConsensusSubmitMessage reached consensus (4 bytes)
   * 8. The topicSequenceNumber from above (8 bytes)
   * 9. The output of the SHA-384 digest of the message bytes from the consensusSubmitMessage (48 bytes)
   * Otherwise, IF the topicRunningHashVersion is '3', then the input data to the SHA-384 digest are, in order:
   * ---
   * 1. The previous running hash of the topic (48 bytes)
   * 2. The topicRunningHashVersion below (8 bytes)
   * 3. The payer account's shard (8 bytes)
   * 4. The payer account's realm (8 bytes)
   * 5. The payer account's number (8 bytes)
   * 6. The topic's shard (8 bytes)
   * 7. The topic's realm (8 bytes)
   * 8. The topic's number (8 bytes)
   * 9. The number of seconds since the epoch before the ConsensusSubmitMessage reached consensus (8 bytes)
   * 10. The number of nanoseconds since 9. before the ConsensusSubmitMessage reached consensus (4 bytes)
   * 11. The topicSequenceNumber from above (8 bytes)
   * 12. The output of the SHA-384 digest of the message bytes from the consensusSubmitMessage (48 bytes)
   */
  ProtobufCBinaryData topicrunninghash;
  /*
   * In the receipt of a ConsensusSubmitMessage, the version of the SHA-384 digest used to update the running hash.
   */
  uint64_t topicrunninghashversion;
  /*
   * In the receipt of a CreateToken, the id of the newly created token
   */
  Proto__TokenID *tokenid;
  /*
   * In the receipt of TokenMint, TokenWipe, TokenBurn, For fungible tokens - the current total supply of this token. For non fungible tokens - the total number of NFTs issued for a given tokenID
   */
  uint64_t newtotalsupply;
  /*
   * In the receipt of a ScheduleCreate, the id of the newly created Scheduled Entity
   */
  Proto__ScheduleID *scheduleid;
  /*
   * In the receipt of a ScheduleCreate or ScheduleSign that resolves to SUCCESS, the TransactionID that should be used to query for the receipt or record of the relevant scheduled transaction
   */
  Proto__TransactionID *scheduledtransactionid;
  /*
   * In the receipt of a TokenMint for tokens of type NON_FUNGIBLE_UNIQUE, the serial numbers of the newly created NFTs
   */
  size_t n_serialnumbers;
  int64_t *serialnumbers;
};
#define PROTO__TRANSACTION_RECEIPT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__transaction_receipt__descriptor) \
    , PROTO__RESPONSE_CODE_ENUM__OK, NULL, NULL, NULL, NULL, NULL, 0, {0,NULL}, 0, NULL, 0, NULL, NULL, 0,NULL }


/* Proto__TransactionReceipt methods */
void   proto__transaction_receipt__init
                     (Proto__TransactionReceipt         *message);
size_t proto__transaction_receipt__get_packed_size
                     (const Proto__TransactionReceipt   *message);
size_t proto__transaction_receipt__pack
                     (const Proto__TransactionReceipt   *message,
                      uint8_t             *out);
size_t proto__transaction_receipt__pack_to_buffer
                     (const Proto__TransactionReceipt   *message,
                      ProtobufCBuffer     *buffer);
Proto__TransactionReceipt *
       proto__transaction_receipt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__transaction_receipt__free_unpacked
                     (Proto__TransactionReceipt *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__TransactionReceipt_Closure)
                 (const Proto__TransactionReceipt *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__transaction_receipt__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TransactionReceipt_2eproto__INCLUDED */
