/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TransactionGetRecord.proto */

#ifndef PROTOBUF_C_TransactionGetRecord_2eproto__INCLUDED
#define PROTOBUF_C_TransactionGetRecord_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "TransactionRecord.pb-c.h"
#include "BasicTypes.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"

typedef struct Proto__TransactionGetRecordQuery Proto__TransactionGetRecordQuery;
typedef struct Proto__TransactionGetRecordResponse Proto__TransactionGetRecordResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Get the record for a transaction. If the transaction requested a record, then the record lasts for one hour, and a state proof is available for it. If the transaction created an account, file, or smart contract instance, then the record will contain the ID for what it created. If the transaction called a smart contract function, then the record contains the result of that call. If the transaction was a cryptocurrency transfer, then the record includes the TransferList which gives the details of that transfer. If the transaction didn't return anything that should be in the record, then the results field will be set to nothing. 
 */
struct  Proto__TransactionGetRecordQuery
{
  ProtobufCMessage base;
  /*
   * Standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
   */
  Proto__QueryHeader *header;
  /*
   * The ID of the transaction for which the record is requested.
   */
  Proto__TransactionID *transactionid;
  /*
   * Whether records of processing duplicate transactions should be returned along with the record of processing the first consensus transaction with the given id whose status was neither <tt>INVALID_NODE_ACCOUNT</tt> nor <tt>INVALID_PAYER_SIGNATURE</tt>; <b>or</b>, if no such record exists, the record of processing the first transaction to reach consensus with the given transaction id..
   */
  protobuf_c_boolean includeduplicates;
};
#define PROTO__TRANSACTION_GET_RECORD_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__transaction_get_record_query__descriptor) \
    , NULL, NULL, 0 }


/*
 * Response when the client sends the node TransactionGetRecordQuery 
 */
struct  Proto__TransactionGetRecordResponse
{
  ProtobufCMessage base;
  /*
   * Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither.
   */
  Proto__ResponseHeader *header;
  /*
   * Either the record of processing the first consensus transaction with the given id whose status was neither <tt>INVALID_NODE_ACCOUNT</tt> nor <tt>INVALID_PAYER_SIGNATURE</tt>; <b>or</b>, if no such record exists, the record of processing the first transaction to reach consensus with the given transaction id.
   */
  Proto__TransactionRecord *transactionrecord;
  /*
   * The records of processing all consensus transaction with the same id as the distinguished record above, in chronological order.
   */
  size_t n_duplicatetransactionrecords;
  Proto__TransactionRecord **duplicatetransactionrecords;
};
#define PROTO__TRANSACTION_GET_RECORD_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__transaction_get_record_response__descriptor) \
    , NULL, NULL, 0,NULL }


/* Proto__TransactionGetRecordQuery methods */
void   proto__transaction_get_record_query__init
                     (Proto__TransactionGetRecordQuery         *message);
size_t proto__transaction_get_record_query__get_packed_size
                     (const Proto__TransactionGetRecordQuery   *message);
size_t proto__transaction_get_record_query__pack
                     (const Proto__TransactionGetRecordQuery   *message,
                      uint8_t             *out);
size_t proto__transaction_get_record_query__pack_to_buffer
                     (const Proto__TransactionGetRecordQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__TransactionGetRecordQuery *
       proto__transaction_get_record_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__transaction_get_record_query__free_unpacked
                     (Proto__TransactionGetRecordQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__TransactionGetRecordResponse methods */
void   proto__transaction_get_record_response__init
                     (Proto__TransactionGetRecordResponse         *message);
size_t proto__transaction_get_record_response__get_packed_size
                     (const Proto__TransactionGetRecordResponse   *message);
size_t proto__transaction_get_record_response__pack
                     (const Proto__TransactionGetRecordResponse   *message,
                      uint8_t             *out);
size_t proto__transaction_get_record_response__pack_to_buffer
                     (const Proto__TransactionGetRecordResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__TransactionGetRecordResponse *
       proto__transaction_get_record_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__transaction_get_record_response__free_unpacked
                     (Proto__TransactionGetRecordResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__TransactionGetRecordQuery_Closure)
                 (const Proto__TransactionGetRecordQuery *message,
                  void *closure_data);
typedef void (*Proto__TransactionGetRecordResponse_Closure)
                 (const Proto__TransactionGetRecordResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__transaction_get_record_query__descriptor;
extern const ProtobufCMessageDescriptor proto__transaction_get_record_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TransactionGetRecord_2eproto__INCLUDED */
