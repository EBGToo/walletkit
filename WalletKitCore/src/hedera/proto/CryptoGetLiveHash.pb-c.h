/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: CryptoGetLiveHash.proto */

#ifndef PROTOBUF_C_CryptoGetLiveHash_2eproto__INCLUDED
#define PROTOBUF_C_CryptoGetLiveHash_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"
#include "CryptoAddLiveHash.pb-c.h"

typedef struct Proto__CryptoGetLiveHashQuery Proto__CryptoGetLiveHashQuery;
typedef struct Proto__CryptoGetLiveHashResponse Proto__CryptoGetLiveHashResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Requests a livehash associated to an account. 
 */
struct  Proto__CryptoGetLiveHashQuery
{
  ProtobufCMessage base;
  /*
   * Standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
   */
  Proto__QueryHeader *header;
  /*
   * The account to which the livehash is associated
   */
  Proto__AccountID *accountid;
  /*
   * The SHA-384 data in the livehash
   */
  ProtobufCBinaryData hash;
};
#define PROTO__CRYPTO_GET_LIVE_HASH_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__crypto_get_live_hash_query__descriptor) \
    , NULL, NULL, {0,NULL} }


/*
 * Returns the full livehash associated to an account, if it is present. Note that the only way to obtain a state proof exhibiting the absence of a livehash from an account is to retrieve a state proof of the entire account with its list of livehashes. 
 */
struct  Proto__CryptoGetLiveHashResponse
{
  ProtobufCMessage base;
  /*
   * Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
   */
  Proto__ResponseHeader *header;
  /*
   * The livehash, if present
   */
  Proto__LiveHash *livehash;
};
#define PROTO__CRYPTO_GET_LIVE_HASH_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__crypto_get_live_hash_response__descriptor) \
    , NULL, NULL }


/* Proto__CryptoGetLiveHashQuery methods */
void   proto__crypto_get_live_hash_query__init
                     (Proto__CryptoGetLiveHashQuery         *message);
size_t proto__crypto_get_live_hash_query__get_packed_size
                     (const Proto__CryptoGetLiveHashQuery   *message);
size_t proto__crypto_get_live_hash_query__pack
                     (const Proto__CryptoGetLiveHashQuery   *message,
                      uint8_t             *out);
size_t proto__crypto_get_live_hash_query__pack_to_buffer
                     (const Proto__CryptoGetLiveHashQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__CryptoGetLiveHashQuery *
       proto__crypto_get_live_hash_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__crypto_get_live_hash_query__free_unpacked
                     (Proto__CryptoGetLiveHashQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__CryptoGetLiveHashResponse methods */
void   proto__crypto_get_live_hash_response__init
                     (Proto__CryptoGetLiveHashResponse         *message);
size_t proto__crypto_get_live_hash_response__get_packed_size
                     (const Proto__CryptoGetLiveHashResponse   *message);
size_t proto__crypto_get_live_hash_response__pack
                     (const Proto__CryptoGetLiveHashResponse   *message,
                      uint8_t             *out);
size_t proto__crypto_get_live_hash_response__pack_to_buffer
                     (const Proto__CryptoGetLiveHashResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__CryptoGetLiveHashResponse *
       proto__crypto_get_live_hash_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__crypto_get_live_hash_response__free_unpacked
                     (Proto__CryptoGetLiveHashResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__CryptoGetLiveHashQuery_Closure)
                 (const Proto__CryptoGetLiveHashQuery *message,
                  void *closure_data);
typedef void (*Proto__CryptoGetLiveHashResponse_Closure)
                 (const Proto__CryptoGetLiveHashResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__crypto_get_live_hash_query__descriptor;
extern const ProtobufCMessageDescriptor proto__crypto_get_live_hash_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_CryptoGetLiveHash_2eproto__INCLUDED */
