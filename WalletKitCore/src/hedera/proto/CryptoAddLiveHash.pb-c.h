/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: CryptoAddLiveHash.proto */

#ifndef PROTOBUF_C_CryptoAddLiveHash_2eproto__INCLUDED
#define PROTOBUF_C_CryptoAddLiveHash_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "Duration.pb-c.h"

typedef struct Proto__LiveHash Proto__LiveHash;
typedef struct Proto__CryptoAddLiveHashTransactionBody Proto__CryptoAddLiveHashTransactionBody;


/* --- enums --- */


/* --- messages --- */

/*
 * A hash---presumably of some kind of credential or certificate---along with a list of keys, each of which may be either a primitive or a threshold key. 
 */
struct  Proto__LiveHash
{
  ProtobufCMessage base;
  /*
   * The account to which the livehash is attached
   */
  Proto__AccountID *accountid;
  /*
   * The SHA-384 hash of a credential or certificate
   */
  ProtobufCBinaryData hash;
  /*
   * A list of keys (primitive or threshold), all of which must sign to attach the livehash to an account, and any one of which can later delete it.
   */
  Proto__KeyList *keys;
  /*
   * The duration for which the livehash will remain valid
   */
  Proto__Duration *duration;
};
#define PROTO__LIVE_HASH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__live_hash__descriptor) \
    , NULL, {0,NULL}, NULL, NULL }


/*
 * At consensus, attaches the given livehash to the given account.
 *The hash can be deleted by the key controlling the account, or by any of the keys associated to the livehash.
 *Hence livehashes provide a revocation service for their implied credentials; for example,
 *when an authority grants a credential to the account, the account owner will cosign with the authority (or authorities)
 *to attach a hash of the credential to the account---hence proving the grant. If the credential is revoked, then any of
 *the authorities may delete it (or the account owner). In this way, the livehash mechanism acts as a revocation service.
 *An account cannot have two identical livehashes associated. To modify the list of keys in a livehash, the
 *livehash should first be deleted, then recreated with a new list of keys. 
 */
struct  Proto__CryptoAddLiveHashTransactionBody
{
  ProtobufCMessage base;
  /*
   * A hash of some credential or certificate, along with the keys of the entities that asserted it validity
   */
  Proto__LiveHash *livehash;
};
#define PROTO__CRYPTO_ADD_LIVE_HASH_TRANSACTION_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__crypto_add_live_hash_transaction_body__descriptor) \
    , NULL }


/* Proto__LiveHash methods */
void   proto__live_hash__init
                     (Proto__LiveHash         *message);
size_t proto__live_hash__get_packed_size
                     (const Proto__LiveHash   *message);
size_t proto__live_hash__pack
                     (const Proto__LiveHash   *message,
                      uint8_t             *out);
size_t proto__live_hash__pack_to_buffer
                     (const Proto__LiveHash   *message,
                      ProtobufCBuffer     *buffer);
Proto__LiveHash *
       proto__live_hash__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__live_hash__free_unpacked
                     (Proto__LiveHash *message,
                      ProtobufCAllocator *allocator);
/* Proto__CryptoAddLiveHashTransactionBody methods */
void   proto__crypto_add_live_hash_transaction_body__init
                     (Proto__CryptoAddLiveHashTransactionBody         *message);
size_t proto__crypto_add_live_hash_transaction_body__get_packed_size
                     (const Proto__CryptoAddLiveHashTransactionBody   *message);
size_t proto__crypto_add_live_hash_transaction_body__pack
                     (const Proto__CryptoAddLiveHashTransactionBody   *message,
                      uint8_t             *out);
size_t proto__crypto_add_live_hash_transaction_body__pack_to_buffer
                     (const Proto__CryptoAddLiveHashTransactionBody   *message,
                      ProtobufCBuffer     *buffer);
Proto__CryptoAddLiveHashTransactionBody *
       proto__crypto_add_live_hash_transaction_body__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__crypto_add_live_hash_transaction_body__free_unpacked
                     (Proto__CryptoAddLiveHashTransactionBody *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__LiveHash_Closure)
                 (const Proto__LiveHash *message,
                  void *closure_data);
typedef void (*Proto__CryptoAddLiveHashTransactionBody_Closure)
                 (const Proto__CryptoAddLiveHashTransactionBody *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__live_hash__descriptor;
extern const ProtobufCMessageDescriptor proto__crypto_add_live_hash_transaction_body__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_CryptoAddLiveHash_2eproto__INCLUDED */
