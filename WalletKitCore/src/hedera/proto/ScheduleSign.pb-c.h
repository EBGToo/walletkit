/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ScheduleSign.proto */

#ifndef PROTOBUF_C_ScheduleSign_2eproto__INCLUDED
#define PROTOBUF_C_ScheduleSign_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"

typedef struct Proto__ScheduleSignTransactionBody Proto__ScheduleSignTransactionBody;


/* --- enums --- */


/* --- messages --- */

/*
 *Adds zero or more signing keys to a schedule. If the resulting set of signing keys satisfy the scheduled 
 *transaction's signing requirements, it will be executed immediately after the triggering <tt>ScheduleSign</tt>.  
 *Upon <tt>SUCCESS</tt>, the receipt includes the <tt>scheduledTransactionID</tt> to use to query for the 
 *record of the scheduled transaction's execution (if it occurs). 
 *Other notable response codes include <tt>INVALID_SCHEDULE_ID</tt>, <tt>SCHEDULE_WAS_DELETD</tt>, 
 *<tt>INVALID_ACCOUNT_ID</tt>, <tt>UNRESOLVABLE_REQUIRED_SIGNERS</tt>, <tt>SOME_SIGNATURES_WERE_INVALID</tt>, 
 *and <tt>NO_NEW_VALID_SIGNATURES</tt>. For more information please see the section of this 
 *documentation on the <tt>ResponseCode</tt> enum. 
 */
struct  Proto__ScheduleSignTransactionBody
{
  ProtobufCMessage base;
  /*
   * The id of the schedule to add signing keys to
   */
  Proto__ScheduleID *scheduleid;
};
#define PROTO__SCHEDULE_SIGN_TRANSACTION_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__schedule_sign_transaction_body__descriptor) \
    , NULL }


/* Proto__ScheduleSignTransactionBody methods */
void   proto__schedule_sign_transaction_body__init
                     (Proto__ScheduleSignTransactionBody         *message);
size_t proto__schedule_sign_transaction_body__get_packed_size
                     (const Proto__ScheduleSignTransactionBody   *message);
size_t proto__schedule_sign_transaction_body__pack
                     (const Proto__ScheduleSignTransactionBody   *message,
                      uint8_t             *out);
size_t proto__schedule_sign_transaction_body__pack_to_buffer
                     (const Proto__ScheduleSignTransactionBody   *message,
                      ProtobufCBuffer     *buffer);
Proto__ScheduleSignTransactionBody *
       proto__schedule_sign_transaction_body__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__schedule_sign_transaction_body__free_unpacked
                     (Proto__ScheduleSignTransactionBody *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__ScheduleSignTransactionBody_Closure)
                 (const Proto__ScheduleSignTransactionBody *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__schedule_sign_transaction_body__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ScheduleSign_2eproto__INCLUDED */
