/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: CryptoGetStakers.proto */

#ifndef PROTOBUF_C_CryptoGetStakers_2eproto__INCLUDED
#define PROTOBUF_C_CryptoGetStakers_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"

typedef struct Proto__CryptoGetStakersQuery Proto__CryptoGetStakersQuery;
typedef struct Proto__ProxyStaker Proto__ProxyStaker;
typedef struct Proto__AllProxyStakers Proto__AllProxyStakers;
typedef struct Proto__CryptoGetStakersResponse Proto__CryptoGetStakersResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Get all the accounts that are proxy staking to this account. For each of them, give the amount currently staked. This is not yet implemented, but will be in a future version of the API. 
 */
struct  Proto__CryptoGetStakersQuery
{
  ProtobufCMessage base;
  /*
   * Standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
   */
  Proto__QueryHeader *header;
  /*
   * The Account ID for which the records should be retrieved
   */
  Proto__AccountID *accountid;
};
#define PROTO__CRYPTO_GET_STAKERS_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__crypto_get_stakers_query__descriptor) \
    , NULL, NULL }


/*
 * information about a single account that is proxy staking 
 */
struct  Proto__ProxyStaker
{
  ProtobufCMessage base;
  /*
   * The Account ID that is proxy staking
   */
  Proto__AccountID *accountid;
  /*
   * The number of hbars that are currently proxy staked
   */
  int64_t amount;
};
#define PROTO__PROXY_STAKER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__proxy_staker__descriptor) \
    , NULL, 0 }


/*
 * all of the accounts proxy staking to a given account, and the amounts proxy staked 
 */
struct  Proto__AllProxyStakers
{
  ProtobufCMessage base;
  /*
   * The Account ID that is being proxy staked to
   */
  Proto__AccountID *accountid;
  /*
   * Each of the proxy staking accounts, and the amount they are proxy staking
   */
  size_t n_proxystaker;
  Proto__ProxyStaker **proxystaker;
};
#define PROTO__ALL_PROXY_STAKERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__all_proxy_stakers__descriptor) \
    , NULL, 0,NULL }


/*
 * Response when the client sends the node CryptoGetStakersQuery 
 */
struct  Proto__CryptoGetStakersResponse
{
  ProtobufCMessage base;
  /*
   *Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
   */
  Proto__ResponseHeader *header;
  /*
   * List of accounts proxy staking to this account, and the amount each is currently proxy staking
   */
  Proto__AllProxyStakers *stakers;
};
#define PROTO__CRYPTO_GET_STAKERS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__crypto_get_stakers_response__descriptor) \
    , NULL, NULL }


/* Proto__CryptoGetStakersQuery methods */
void   proto__crypto_get_stakers_query__init
                     (Proto__CryptoGetStakersQuery         *message);
size_t proto__crypto_get_stakers_query__get_packed_size
                     (const Proto__CryptoGetStakersQuery   *message);
size_t proto__crypto_get_stakers_query__pack
                     (const Proto__CryptoGetStakersQuery   *message,
                      uint8_t             *out);
size_t proto__crypto_get_stakers_query__pack_to_buffer
                     (const Proto__CryptoGetStakersQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__CryptoGetStakersQuery *
       proto__crypto_get_stakers_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__crypto_get_stakers_query__free_unpacked
                     (Proto__CryptoGetStakersQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__ProxyStaker methods */
void   proto__proxy_staker__init
                     (Proto__ProxyStaker         *message);
size_t proto__proxy_staker__get_packed_size
                     (const Proto__ProxyStaker   *message);
size_t proto__proxy_staker__pack
                     (const Proto__ProxyStaker   *message,
                      uint8_t             *out);
size_t proto__proxy_staker__pack_to_buffer
                     (const Proto__ProxyStaker   *message,
                      ProtobufCBuffer     *buffer);
Proto__ProxyStaker *
       proto__proxy_staker__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__proxy_staker__free_unpacked
                     (Proto__ProxyStaker *message,
                      ProtobufCAllocator *allocator);
/* Proto__AllProxyStakers methods */
void   proto__all_proxy_stakers__init
                     (Proto__AllProxyStakers         *message);
size_t proto__all_proxy_stakers__get_packed_size
                     (const Proto__AllProxyStakers   *message);
size_t proto__all_proxy_stakers__pack
                     (const Proto__AllProxyStakers   *message,
                      uint8_t             *out);
size_t proto__all_proxy_stakers__pack_to_buffer
                     (const Proto__AllProxyStakers   *message,
                      ProtobufCBuffer     *buffer);
Proto__AllProxyStakers *
       proto__all_proxy_stakers__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__all_proxy_stakers__free_unpacked
                     (Proto__AllProxyStakers *message,
                      ProtobufCAllocator *allocator);
/* Proto__CryptoGetStakersResponse methods */
void   proto__crypto_get_stakers_response__init
                     (Proto__CryptoGetStakersResponse         *message);
size_t proto__crypto_get_stakers_response__get_packed_size
                     (const Proto__CryptoGetStakersResponse   *message);
size_t proto__crypto_get_stakers_response__pack
                     (const Proto__CryptoGetStakersResponse   *message,
                      uint8_t             *out);
size_t proto__crypto_get_stakers_response__pack_to_buffer
                     (const Proto__CryptoGetStakersResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__CryptoGetStakersResponse *
       proto__crypto_get_stakers_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__crypto_get_stakers_response__free_unpacked
                     (Proto__CryptoGetStakersResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__CryptoGetStakersQuery_Closure)
                 (const Proto__CryptoGetStakersQuery *message,
                  void *closure_data);
typedef void (*Proto__ProxyStaker_Closure)
                 (const Proto__ProxyStaker *message,
                  void *closure_data);
typedef void (*Proto__AllProxyStakers_Closure)
                 (const Proto__AllProxyStakers *message,
                  void *closure_data);
typedef void (*Proto__CryptoGetStakersResponse_Closure)
                 (const Proto__CryptoGetStakersResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__crypto_get_stakers_query__descriptor;
extern const ProtobufCMessageDescriptor proto__proxy_staker__descriptor;
extern const ProtobufCMessageDescriptor proto__all_proxy_stakers__descriptor;
extern const ProtobufCMessageDescriptor proto__crypto_get_stakers_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_CryptoGetStakers_2eproto__INCLUDED */
