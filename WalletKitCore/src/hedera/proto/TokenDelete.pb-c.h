/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TokenDelete.proto */

#ifndef PROTOBUF_C_TokenDelete_2eproto__INCLUDED
#define PROTOBUF_C_TokenDelete_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"

typedef struct Proto__TokenDeleteTransactionBody Proto__TokenDeleteTransactionBody;


/* --- enums --- */


/* --- messages --- */

/*
 *Marks a token as deleted, though it will remain in the ledger.
 *The operation must be signed by the specified Admin Key of the Token. If admin key is not set, Transaction will result in TOKEN_IS_IMMUTABlE.
 *Once deleted update, mint, burn, wipe, freeze, unfreeze, grant kyc, revoke kyc and token transfer transactions will resolve to TOKEN_WAS_DELETED. 
 */
struct  Proto__TokenDeleteTransactionBody
{
  ProtobufCMessage base;
  /*
   * The token to be deleted. If invalid token is specified, transaction will result in INVALID_TOKEN_ID
   */
  Proto__TokenID *token;
};
#define PROTO__TOKEN_DELETE_TRANSACTION_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__token_delete_transaction_body__descriptor) \
    , NULL }


/* Proto__TokenDeleteTransactionBody methods */
void   proto__token_delete_transaction_body__init
                     (Proto__TokenDeleteTransactionBody         *message);
size_t proto__token_delete_transaction_body__get_packed_size
                     (const Proto__TokenDeleteTransactionBody   *message);
size_t proto__token_delete_transaction_body__pack
                     (const Proto__TokenDeleteTransactionBody   *message,
                      uint8_t             *out);
size_t proto__token_delete_transaction_body__pack_to_buffer
                     (const Proto__TokenDeleteTransactionBody   *message,
                      ProtobufCBuffer     *buffer);
Proto__TokenDeleteTransactionBody *
       proto__token_delete_transaction_body__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__token_delete_transaction_body__free_unpacked
                     (Proto__TokenDeleteTransactionBody *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__TokenDeleteTransactionBody_Closure)
                 (const Proto__TokenDeleteTransactionBody *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__token_delete_transaction_body__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TokenDelete_2eproto__INCLUDED */
