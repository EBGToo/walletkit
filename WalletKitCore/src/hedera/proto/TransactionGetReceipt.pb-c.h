/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TransactionGetReceipt.proto */

#ifndef PROTOBUF_C_TransactionGetReceipt_2eproto__INCLUDED
#define PROTOBUF_C_TransactionGetReceipt_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "TransactionReceipt.pb-c.h"
#include "BasicTypes.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"

typedef struct Proto__TransactionGetReceiptQuery Proto__TransactionGetReceiptQuery;
typedef struct Proto__TransactionGetReceiptResponse Proto__TransactionGetReceiptResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Get the receipt of a transaction, given its transaction ID. Once a transaction reaches consensus, then information about whether it succeeded or failed will be available until the end of the receipt period.  Before and after the receipt period, and for a transaction that was never submitted, the receipt is unknown.  This query is free (the payment field is left empty). No State proof is available for this response
 */
struct  Proto__TransactionGetReceiptQuery
{
  ProtobufCMessage base;
  /*
   * Standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
   */
  Proto__QueryHeader *header;
  /*
   * The ID of the transaction for which the receipt is requested.
   */
  Proto__TransactionID *transactionid;
  /*
   * Whether receipts of processing duplicate transactions should be returned along with the receipt of processing the first consensus transaction with the given id whose status was neither <tt>INVALID_NODE_ACCOUNT</tt> nor <tt>INVALID_PAYER_SIGNATURE</tt>; <b>or</b>, if no such receipt exists, the receipt of processing the first transaction to reach consensus with the given transaction id..
   */
  protobuf_c_boolean includeduplicates;
};
#define PROTO__TRANSACTION_GET_RECEIPT_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__transaction_get_receipt_query__descriptor) \
    , NULL, NULL, 0 }


/*
 * Response when the client sends the node TransactionGetReceiptQuery. If it created a new entity (account, file, or smart contract instance) then one of the three ID fields will be filled in with the ID of the new entity. Sometimes a single transaction will create more than one new entity, such as when a new contract instance is created, and this also creates the new account that it owned by that instance. No State proof is available for this response 
 */
struct  Proto__TransactionGetReceiptResponse
{
  ProtobufCMessage base;
  /*
   *Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
   */
  Proto__ResponseHeader *header;
  /*
   * Either the receipt of processing the first consensus transaction with the given id whose status was neither <tt>INVALID_NODE_ACCOUNT</tt> nor <tt>INVALID_PAYER_SIGNATURE</tt>; <b>or</b>, if no such receipt exists, the receipt of processing the first transaction to reach consensus with the given transaction id.
   */
  Proto__TransactionReceipt *receipt;
  /*
   * The receipts of processing all consensus transaction with the same id as the distinguished receipt above, in chronological order.
   */
  size_t n_duplicatetransactionreceipts;
  Proto__TransactionReceipt **duplicatetransactionreceipts;
};
#define PROTO__TRANSACTION_GET_RECEIPT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__transaction_get_receipt_response__descriptor) \
    , NULL, NULL, 0,NULL }


/* Proto__TransactionGetReceiptQuery methods */
void   proto__transaction_get_receipt_query__init
                     (Proto__TransactionGetReceiptQuery         *message);
size_t proto__transaction_get_receipt_query__get_packed_size
                     (const Proto__TransactionGetReceiptQuery   *message);
size_t proto__transaction_get_receipt_query__pack
                     (const Proto__TransactionGetReceiptQuery   *message,
                      uint8_t             *out);
size_t proto__transaction_get_receipt_query__pack_to_buffer
                     (const Proto__TransactionGetReceiptQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__TransactionGetReceiptQuery *
       proto__transaction_get_receipt_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__transaction_get_receipt_query__free_unpacked
                     (Proto__TransactionGetReceiptQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__TransactionGetReceiptResponse methods */
void   proto__transaction_get_receipt_response__init
                     (Proto__TransactionGetReceiptResponse         *message);
size_t proto__transaction_get_receipt_response__get_packed_size
                     (const Proto__TransactionGetReceiptResponse   *message);
size_t proto__transaction_get_receipt_response__pack
                     (const Proto__TransactionGetReceiptResponse   *message,
                      uint8_t             *out);
size_t proto__transaction_get_receipt_response__pack_to_buffer
                     (const Proto__TransactionGetReceiptResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__TransactionGetReceiptResponse *
       proto__transaction_get_receipt_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__transaction_get_receipt_response__free_unpacked
                     (Proto__TransactionGetReceiptResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__TransactionGetReceiptQuery_Closure)
                 (const Proto__TransactionGetReceiptQuery *message,
                  void *closure_data);
typedef void (*Proto__TransactionGetReceiptResponse_Closure)
                 (const Proto__TransactionGetReceiptResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__transaction_get_receipt_query__descriptor;
extern const ProtobufCMessageDescriptor proto__transaction_get_receipt_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TransactionGetReceipt_2eproto__INCLUDED */
