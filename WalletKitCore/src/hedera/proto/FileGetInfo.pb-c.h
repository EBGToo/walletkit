/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: FileGetInfo.proto */

#ifndef PROTOBUF_C_FileGetInfo_2eproto__INCLUDED
#define PROTOBUF_C_FileGetInfo_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "Timestamp.pb-c.h"
#include "BasicTypes.pb-c.h"
#include "QueryHeader.pb-c.h"
#include "ResponseHeader.pb-c.h"

typedef struct Proto__FileGetInfoQuery Proto__FileGetInfoQuery;
typedef struct Proto__FileGetInfoResponse Proto__FileGetInfoResponse;
typedef struct Proto__FileGetInfoResponse__FileInfo Proto__FileGetInfoResponse__FileInfo;


/* --- enums --- */


/* --- messages --- */

/*
 * Get all of the information about a file, except for its contents. When a file expires, it no longer exists, and there will be no info about it, and the fileInfo field will be blank. If a transaction or smart contract deletes the file, but it has not yet expired, then the fileInfo field will be non-empty, the deleted field will be true, its size will be 0, and its contents will be empty. 
 */
struct  Proto__FileGetInfoQuery
{
  ProtobufCMessage base;
  /*
   * Standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
   */
  Proto__QueryHeader *header;
  /*
   * The file ID of the file for which information is requested
   */
  Proto__FileID *fileid;
};
#define PROTO__FILE_GET_INFO_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__file_get_info_query__descriptor) \
    , NULL, NULL }


struct  Proto__FileGetInfoResponse__FileInfo
{
  ProtobufCMessage base;
  /*
   * The file ID of the file for which information is requested
   */
  Proto__FileID *fileid;
  /*
   * Number of bytes in contents
   */
  int64_t size;
  /*
   * The current time at which this account is set to expire
   */
  Proto__Timestamp *expirationtime;
  /*
   * True if deleted but not yet expired
   */
  protobuf_c_boolean deleted;
  /*
   * One of these keys must sign in order to modify or delete the file
   */
  Proto__KeyList *keys;
  /*
   * The memo associated with the file
   */
  char *memo;
};
#define PROTO__FILE_GET_INFO_RESPONSE__FILE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__file_get_info_response__file_info__descriptor) \
    , NULL, 0, NULL, 0, NULL, (char *)protobuf_c_empty_string }


/*
 * Response when the client sends the node FileGetInfoQuery 
 */
struct  Proto__FileGetInfoResponse
{
  ProtobufCMessage base;
  /*
   *Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
   */
  Proto__ResponseHeader *header;
  /*
   * The information about the file
   */
  Proto__FileGetInfoResponse__FileInfo *fileinfo;
};
#define PROTO__FILE_GET_INFO_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__file_get_info_response__descriptor) \
    , NULL, NULL }


/* Proto__FileGetInfoQuery methods */
void   proto__file_get_info_query__init
                     (Proto__FileGetInfoQuery         *message);
size_t proto__file_get_info_query__get_packed_size
                     (const Proto__FileGetInfoQuery   *message);
size_t proto__file_get_info_query__pack
                     (const Proto__FileGetInfoQuery   *message,
                      uint8_t             *out);
size_t proto__file_get_info_query__pack_to_buffer
                     (const Proto__FileGetInfoQuery   *message,
                      ProtobufCBuffer     *buffer);
Proto__FileGetInfoQuery *
       proto__file_get_info_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__file_get_info_query__free_unpacked
                     (Proto__FileGetInfoQuery *message,
                      ProtobufCAllocator *allocator);
/* Proto__FileGetInfoResponse__FileInfo methods */
void   proto__file_get_info_response__file_info__init
                     (Proto__FileGetInfoResponse__FileInfo         *message);
/* Proto__FileGetInfoResponse methods */
void   proto__file_get_info_response__init
                     (Proto__FileGetInfoResponse         *message);
size_t proto__file_get_info_response__get_packed_size
                     (const Proto__FileGetInfoResponse   *message);
size_t proto__file_get_info_response__pack
                     (const Proto__FileGetInfoResponse   *message,
                      uint8_t             *out);
size_t proto__file_get_info_response__pack_to_buffer
                     (const Proto__FileGetInfoResponse   *message,
                      ProtobufCBuffer     *buffer);
Proto__FileGetInfoResponse *
       proto__file_get_info_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__file_get_info_response__free_unpacked
                     (Proto__FileGetInfoResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__FileGetInfoQuery_Closure)
                 (const Proto__FileGetInfoQuery *message,
                  void *closure_data);
typedef void (*Proto__FileGetInfoResponse__FileInfo_Closure)
                 (const Proto__FileGetInfoResponse__FileInfo *message,
                  void *closure_data);
typedef void (*Proto__FileGetInfoResponse_Closure)
                 (const Proto__FileGetInfoResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__file_get_info_query__descriptor;
extern const ProtobufCMessageDescriptor proto__file_get_info_response__descriptor;
extern const ProtobufCMessageDescriptor proto__file_get_info_response__file_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_FileGetInfo_2eproto__INCLUDED */
