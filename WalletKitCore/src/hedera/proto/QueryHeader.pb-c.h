/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: QueryHeader.proto */

#ifndef PROTOBUF_C_QueryHeader_2eproto__INCLUDED
#define PROTOBUF_C_QueryHeader_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "Transaction.pb-c.h"

typedef struct Proto__QueryHeader Proto__QueryHeader;


/* --- enums --- */

/*
 *The client uses the ResponseType to indicate that it desires the node send just the answer, or both the answer and a state proof. It can also ask for just the cost and not the answer itself (allowing it to tailor the payment transaction accordingly). If the payment in the query fails the precheck, then the response may have some fields blank. The state proof is only available for some types of information. It is available for a Record, but not a receipt. It is available for the information in each kind of *GetInfo request.
 */
typedef enum _Proto__ResponseType {
  /*
   * Response returns answer
   */
  PROTO__RESPONSE_TYPE__ANSWER_ONLY = 0,
  /*
   * (NOT YET SUPPORTED) Response returns both answer and state proof
   */
  PROTO__RESPONSE_TYPE__ANSWER_STATE_PROOF = 1,
  /*
   * Response returns the cost of answer
   */
  PROTO__RESPONSE_TYPE__COST_ANSWER = 2,
  /*
   * (NOT YET SUPPORTED) Response returns the total cost of answer and state proof
   */
  PROTO__RESPONSE_TYPE__COST_ANSWER_STATE_PROOF = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__RESPONSE_TYPE)
} Proto__ResponseType;

/* --- messages --- */

/*
 *Each query from the client to the node will contain the QueryHeader, which gives the requested response type, and includes a payment transaction that will compensate the node for responding to the query. The payment can be blank if the query is free.
 */
struct  Proto__QueryHeader
{
  ProtobufCMessage base;
  /*
   * A signed CryptoTransferTransaction to pay the node a fee for handling this query
   */
  Proto__Transaction *payment;
  /*
   * The requested response, asking for cost, state proof, both, or neither
   */
  Proto__ResponseType responsetype;
};
#define PROTO__QUERY_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__query_header__descriptor) \
    , NULL, PROTO__RESPONSE_TYPE__ANSWER_ONLY }


/* Proto__QueryHeader methods */
void   proto__query_header__init
                     (Proto__QueryHeader         *message);
size_t proto__query_header__get_packed_size
                     (const Proto__QueryHeader   *message);
size_t proto__query_header__pack
                     (const Proto__QueryHeader   *message,
                      uint8_t             *out);
size_t proto__query_header__pack_to_buffer
                     (const Proto__QueryHeader   *message,
                      ProtobufCBuffer     *buffer);
Proto__QueryHeader *
       proto__query_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__query_header__free_unpacked
                     (Proto__QueryHeader *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__QueryHeader_Closure)
                 (const Proto__QueryHeader *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    proto__response_type__descriptor;
extern const ProtobufCMessageDescriptor proto__query_header__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_QueryHeader_2eproto__INCLUDED */
